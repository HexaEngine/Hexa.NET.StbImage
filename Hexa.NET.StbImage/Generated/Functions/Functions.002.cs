// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.StbImage
{
	public unsafe partial class StbImage
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeNoheaderBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref string obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] byte* ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (obuffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(obuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(obuffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ZlibDecodeNoheaderBufferNative(pStr0, olen, ibuffer, ilen);
			obuffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeNoheaderBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pibuffer = &ibuffer)
			{
				int ret = ZlibDecodeNoheaderBufferNative(obuffer, olen, (byte*)pibuffer, ilen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeNoheaderBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pibuffer = ibuffer)
			{
				int ret = ZlibDecodeNoheaderBufferNative(obuffer, olen, (byte*)pibuffer, ilen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeNoheaderBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] string ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (ibuffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(ibuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(ibuffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ZlibDecodeNoheaderBufferNative(obuffer, olen, pStr0, ilen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeNoheaderBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref byte obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pobuffer = &obuffer)
			{
				fixed (byte* pibuffer = &ibuffer)
				{
					int ret = ZlibDecodeNoheaderBufferNative((byte*)pobuffer, olen, (byte*)pibuffer, ilen);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeNoheaderBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref byte obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pobuffer = &obuffer)
			{
				fixed (byte* pibuffer = ibuffer)
				{
					int ret = ZlibDecodeNoheaderBufferNative((byte*)pobuffer, olen, (byte*)pibuffer, ilen);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeNoheaderBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref string obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] string ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (obuffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(obuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(obuffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (ibuffer != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(ibuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(ibuffer, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ZlibDecodeNoheaderBufferNative(pStr0, olen, pStr1, ilen);
			obuffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WritePngNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int strideInBytes)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int, void*, int, int>)funcTable[43])(filename, w, h, comp, data, strideInBytes);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int, nint, int, int>)funcTable[43])((nint)filename, w, h, comp, (nint)data, strideInBytes);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WritePng([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int strideInBytes)
		{
			int ret = WritePngNative(filename, w, h, comp, data, strideInBytes);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WritePng([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int strideInBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = WritePngNative((byte*)pfilename, w, h, comp, data, strideInBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WritePng([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int strideInBytes)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = WritePngNative((byte*)pfilename, w, h, comp, data, strideInBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WritePng([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int strideInBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = WritePngNative(pStr0, w, h, comp, data, strideInBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_bmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WriteBmpNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int, void*, int>)funcTable[44])(filename, w, h, comp, data);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int, nint, int>)funcTable[44])((nint)filename, w, h, comp, (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_bmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteBmp([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			int ret = WriteBmpNative(filename, w, h, comp, data);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_bmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteBmp([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = WriteBmpNative((byte*)pfilename, w, h, comp, data);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_bmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteBmp([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = WriteBmpNative((byte*)pfilename, w, h, comp, data);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_bmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteBmp([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = WriteBmpNative(pStr0, w, h, comp, data);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_tga")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WriteTgaNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int, void*, int>)funcTable[45])(filename, w, h, comp, data);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int, nint, int>)funcTable[45])((nint)filename, w, h, comp, (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_tga")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteTga([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			int ret = WriteTgaNative(filename, w, h, comp, data);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_tga")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteTga([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = WriteTgaNative((byte*)pfilename, w, h, comp, data);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_tga")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteTga([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = WriteTgaNative((byte*)pfilename, w, h, comp, data);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_tga")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteTga([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = WriteTgaNative(pStr0, w, h, comp, data);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WriteHdrNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] float* data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int, float*, int>)funcTable[46])(filename, w, h, comp, data);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int, nint, int>)funcTable[46])((nint)filename, w, h, comp, (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] float* data)
		{
			int ret = WriteHdrNative(filename, w, h, comp, data);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] float* data)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = WriteHdrNative((byte*)pfilename, w, h, comp, data);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] float* data)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = WriteHdrNative((byte*)pfilename, w, h, comp, data);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] float* data)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = WriteHdrNative(pStr0, w, h, comp, data);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] ref float data)
		{
			fixed (float* pdata = &data)
			{
				int ret = WriteHdrNative(filename, w, h, comp, (float*)pdata);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] ref float data)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (float* pdata = &data)
				{
					int ret = WriteHdrNative((byte*)pfilename, w, h, comp, (float*)pdata);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] ref float data)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (float* pdata = &data)
				{
					int ret = WriteHdrNative((byte*)pfilename, w, h, comp, (float*)pdata);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] ref float data)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pdata = &data)
			{
				int ret = WriteHdrNative(pStr0, w, h, comp, (float*)pdata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_jpg")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WriteJpgNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int, void*, int, int>)funcTable[47])(filename, x, y, comp, data, quality);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int, nint, int, int>)funcTable[47])((nint)filename, x, y, comp, (nint)data, quality);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_jpg")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteJpg([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			int ret = WriteJpgNative(filename, x, y, comp, data, quality);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_jpg")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteJpg([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = WriteJpgNative((byte*)pfilename, x, y, comp, data, quality);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_jpg")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteJpg([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = WriteJpgNative((byte*)pfilename, x, y, comp, data, quality);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_jpg")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteJpg([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = WriteJpgNative(pStr0, x, y, comp, data, quality);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WritePngToFuncNative([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int strideInBytes)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<void*, void*, int, void>*, void*, int, int, int, void*, int, int>)funcTable[48])(func, context, w, h, comp, data, strideInBytes);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, nint, int, int>)funcTable[48])((nint)func, (nint)context, w, h, comp, (nint)data, strideInBytes);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WritePngToFunc([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int strideInBytes)
		{
			int ret = WritePngToFuncNative(func, context, w, h, comp, data, strideInBytes);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_bmp_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WriteBmpToFuncNative([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<void*, void*, int, void>*, void*, int, int, int, void*, int>)funcTable[49])(func, context, w, h, comp, data);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, nint, int>)funcTable[49])((nint)func, (nint)context, w, h, comp, (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_bmp_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteBmpToFunc([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			int ret = WriteBmpToFuncNative(func, context, w, h, comp, data);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_tga_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WriteTgaToFuncNative([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<void*, void*, int, void>*, void*, int, int, int, void*, int>)funcTable[50])(func, context, w, h, comp, data);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, nint, int>)funcTable[50])((nint)func, (nint)context, w, h, comp, (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_tga_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteTgaToFunc([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			int ret = WriteTgaToFuncNative(func, context, w, h, comp, data);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WriteHdrToFuncNative([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] float* data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<void*, void*, int, void>*, void*, int, int, int, float*, int>)funcTable[51])(func, context, w, h, comp, data);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, nint, int>)funcTable[51])((nint)func, (nint)context, w, h, comp, (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdrToFunc([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] float* data)
		{
			int ret = WriteHdrToFuncNative(func, context, w, h, comp, data);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_hdr_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteHdrToFunc([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const float*")] ref float data)
		{
			fixed (float* pdata = &data)
			{
				int ret = WriteHdrToFuncNative(func, context, w, h, comp, (float*)pdata);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_jpg_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WriteJpgToFuncNative([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<void*, void*, int, void>*, void*, int, int, int, void*, int, int>)funcTable[52])(func, context, x, y, comp, data, quality);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, nint, int, int>)funcTable[52])((nint)func, (nint)context, x, y, comp, (nint)data, quality);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_jpg_to_func")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WriteJpgToFunc([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "stbi_write_func*")] delegate*<void*, void*, int, void>* func, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int")] int comp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			int ret = WriteJpgToFuncNative(func, context, x, y, comp, data, quality);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_flip_vertically_on_write")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FlipVerticallyOnWriteNative([NativeName(NativeNameType.Param, "flip_boolean")] [NativeName(NativeNameType.Type, "int")] int flipBoolean)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[53])(flipBoolean);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[53])(flipBoolean);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_flip_vertically_on_write")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FlipVerticallyOnWrite([NativeName(NativeNameType.Param, "flip_boolean")] [NativeName(NativeNameType.Type, "int")] int flipBoolean)
		{
			FlipVerticallyOnWriteNative(flipBoolean);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_compress")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ZlibCompressNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "int")] int dataLen, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int*, int, byte*>)funcTable[54])(data, dataLen, outLen, quality);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint, int, nint>)funcTable[54])((nint)data, dataLen, (nint)outLen, quality);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_compress")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ZlibCompress([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "int")] int dataLen, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			byte* ret = ZlibCompressNative(data, dataLen, outLen, quality);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_compress")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ZlibCompressS([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "int")] int dataLen, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			string ret = Utils.DecodeStringUTF8(ZlibCompressNative(data, dataLen, outLen, quality));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_compress")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ZlibCompress([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "int")] int dataLen, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			fixed (byte* pdata = &data)
			{
				byte* ret = ZlibCompressNative((byte*)pdata, dataLen, outLen, quality);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_compress")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ZlibCompressS([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "int")] int dataLen, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			fixed (byte* pdata = &data)
			{
				string ret = Utils.DecodeStringUTF8(ZlibCompressNative((byte*)pdata, dataLen, outLen, quality));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_compress")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ZlibCompress([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "int")] int dataLen, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] ref int outLen, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			fixed (int* poutLen = &outLen)
			{
				byte* ret = ZlibCompressNative(data, dataLen, (int*)poutLen, quality);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_compress")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ZlibCompressS([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "int")] int dataLen, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] ref int outLen, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			fixed (int* poutLen = &outLen)
			{
				string ret = Utils.DecodeStringUTF8(ZlibCompressNative(data, dataLen, (int*)poutLen, quality));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_compress")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ZlibCompress([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "int")] int dataLen, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] ref int outLen, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			fixed (byte* pdata = &data)
			{
				fixed (int* poutLen = &outLen)
				{
					byte* ret = ZlibCompressNative((byte*)pdata, dataLen, (int*)poutLen, quality);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_compress")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ZlibCompressS([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "int")] int dataLen, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] ref int outLen, [NativeName(NativeNameType.Param, "quality")] [NativeName(NativeNameType.Type, "int")] int quality)
		{
			fixed (byte* pdata = &data)
			{
				fixed (int* poutLen = &outLen)
				{
					string ret = Utils.DecodeStringUTF8(ZlibCompressNative((byte*)pdata, dataLen, (int*)poutLen, quality));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_mem")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* WritePngToMemNative([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pixels, [NativeName(NativeNameType.Param, "stride_bytes")] [NativeName(NativeNameType.Type, "int")] int strideBytes, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int, int, int*, byte*>)funcTable[55])(pixels, strideBytes, x, y, n, outLen);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, nint, nint>)funcTable[55])((nint)pixels, strideBytes, x, y, n, (nint)outLen);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_mem")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* WritePngToMem([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pixels, [NativeName(NativeNameType.Param, "stride_bytes")] [NativeName(NativeNameType.Type, "int")] int strideBytes, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen)
		{
			byte* ret = WritePngToMemNative(pixels, strideBytes, x, y, n, outLen);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_mem")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string WritePngToMemS([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pixels, [NativeName(NativeNameType.Param, "stride_bytes")] [NativeName(NativeNameType.Type, "int")] int strideBytes, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen)
		{
			string ret = Utils.DecodeStringUTF8(WritePngToMemNative(pixels, strideBytes, x, y, n, outLen));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_mem")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* WritePngToMem([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pixels, [NativeName(NativeNameType.Param, "stride_bytes")] [NativeName(NativeNameType.Type, "int")] int strideBytes, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen)
		{
			fixed (byte* ppixels = &pixels)
			{
				byte* ret = WritePngToMemNative((byte*)ppixels, strideBytes, x, y, n, outLen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_mem")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string WritePngToMemS([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pixels, [NativeName(NativeNameType.Param, "stride_bytes")] [NativeName(NativeNameType.Type, "int")] int strideBytes, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] int* outLen)
		{
			fixed (byte* ppixels = &pixels)
			{
				string ret = Utils.DecodeStringUTF8(WritePngToMemNative((byte*)ppixels, strideBytes, x, y, n, outLen));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_mem")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* WritePngToMem([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pixels, [NativeName(NativeNameType.Param, "stride_bytes")] [NativeName(NativeNameType.Type, "int")] int strideBytes, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] ref int outLen)
		{
			fixed (int* poutLen = &outLen)
			{
				byte* ret = WritePngToMemNative(pixels, strideBytes, x, y, n, (int*)poutLen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_mem")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string WritePngToMemS([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pixels, [NativeName(NativeNameType.Param, "stride_bytes")] [NativeName(NativeNameType.Type, "int")] int strideBytes, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] ref int outLen)
		{
			fixed (int* poutLen = &outLen)
			{
				string ret = Utils.DecodeStringUTF8(WritePngToMemNative(pixels, strideBytes, x, y, n, (int*)poutLen));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_mem")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* WritePngToMem([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pixels, [NativeName(NativeNameType.Param, "stride_bytes")] [NativeName(NativeNameType.Type, "int")] int strideBytes, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] ref int outLen)
		{
			fixed (byte* ppixels = &pixels)
			{
				fixed (int* poutLen = &outLen)
				{
					byte* ret = WritePngToMemNative((byte*)ppixels, strideBytes, x, y, n, (int*)poutLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_write_png_to_mem")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string WritePngToMemS([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pixels, [NativeName(NativeNameType.Param, "stride_bytes")] [NativeName(NativeNameType.Type, "int")] int strideBytes, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "out_len")] [NativeName(NativeNameType.Type, "int*")] ref int outLen)
		{
			fixed (byte* ppixels = &pixels)
			{
				fixed (int* poutLen = &outLen)
				{
					string ret = Utils.DecodeStringUTF8(WritePngToMemNative((byte*)ppixels, strideBytes, x, y, n, (int*)poutLen));
					return ret;
				}
			}
		}

		/// <summary>
		/// ===============================================================<br/>
		/// Simple-complexity API<br/>
		/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_srgb")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ResizeUint8SrgbNative([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int, byte*, int, int, int, StbirPixelLayout, byte*>)funcTable[56])(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, int, int, nint, int, int, int, StbirPixelLayout, nint>)funcTable[56])((nint)inputPixels, inputW, inputH, inputStrideInBytes, (nint)outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
			#endif
		}

		/// <summary>
		/// ===============================================================<br/>
		/// Simple-complexity API<br/>
		/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_srgb")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ResizeUint8Srgb([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			byte* ret = ResizeUint8SrgbNative(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
			return ret;
		}

		/// <summary>
		/// ===============================================================<br/>
		/// Simple-complexity API<br/>
		/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_srgb")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ResizeUint8SrgbS([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			string ret = Utils.DecodeStringUTF8(ResizeUint8SrgbNative(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType));
			return ret;
		}

		/// <summary>
		/// ===============================================================<br/>
		/// Simple-complexity API<br/>
		/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_srgb")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ResizeUint8Srgb([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* pinputPixels = &inputPixels)
			{
				byte* ret = ResizeUint8SrgbNative((byte*)pinputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
				return ret;
			}
		}

		/// <summary>
		/// ===============================================================<br/>
		/// Simple-complexity API<br/>
		/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_srgb")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ResizeUint8SrgbS([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* pinputPixels = &inputPixels)
			{
				string ret = Utils.DecodeStringUTF8(ResizeUint8SrgbNative((byte*)pinputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType));
				return ret;
			}
		}

		/// <summary>
		/// ===============================================================<br/>
		/// Simple-complexity API<br/>
		/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_srgb")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ResizeUint8Srgb([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* poutputPixels = &outputPixels)
			{
				byte* ret = ResizeUint8SrgbNative(inputPixels, inputW, inputH, inputStrideInBytes, (byte*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType);
				return ret;
			}
		}

		/// <summary>
		/// ===============================================================<br/>
		/// Simple-complexity API<br/>
		/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_srgb")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ResizeUint8SrgbS([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* poutputPixels = &outputPixels)
			{
				string ret = Utils.DecodeStringUTF8(ResizeUint8SrgbNative(inputPixels, inputW, inputH, inputStrideInBytes, (byte*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType));
				return ret;
			}
		}

		/// <summary>
		/// ===============================================================<br/>
		/// Simple-complexity API<br/>
		/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_srgb")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ResizeUint8Srgb([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* pinputPixels = &inputPixels)
			{
				fixed (byte* poutputPixels = &outputPixels)
				{
					byte* ret = ResizeUint8SrgbNative((byte*)pinputPixels, inputW, inputH, inputStrideInBytes, (byte*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType);
					return ret;
				}
			}
		}

		/// <summary>
		/// ===============================================================<br/>
		/// Simple-complexity API<br/>
		/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_srgb")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ResizeUint8SrgbS([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* pinputPixels = &inputPixels)
			{
				fixed (byte* poutputPixels = &outputPixels)
				{
					string ret = Utils.DecodeStringUTF8(ResizeUint8SrgbNative((byte*)pinputPixels, inputW, inputH, inputStrideInBytes, (byte*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_linear")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ResizeUint8LinearNative([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int, byte*, int, int, int, StbirPixelLayout, byte*>)funcTable[57])(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, int, int, nint, int, int, int, StbirPixelLayout, nint>)funcTable[57])((nint)inputPixels, inputW, inputH, inputStrideInBytes, (nint)outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_linear")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ResizeUint8Linear([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			byte* ret = ResizeUint8LinearNative(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_linear")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ResizeUint8LinearS([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			string ret = Utils.DecodeStringUTF8(ResizeUint8LinearNative(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_linear")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ResizeUint8Linear([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* pinputPixels = &inputPixels)
			{
				byte* ret = ResizeUint8LinearNative((byte*)pinputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_linear")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ResizeUint8LinearS([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* pinputPixels = &inputPixels)
			{
				string ret = Utils.DecodeStringUTF8(ResizeUint8LinearNative((byte*)pinputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_linear")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ResizeUint8Linear([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* poutputPixels = &outputPixels)
			{
				byte* ret = ResizeUint8LinearNative(inputPixels, inputW, inputH, inputStrideInBytes, (byte*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_linear")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ResizeUint8LinearS([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* poutputPixels = &outputPixels)
			{
				string ret = Utils.DecodeStringUTF8(ResizeUint8LinearNative(inputPixels, inputW, inputH, inputStrideInBytes, (byte*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_linear")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static byte* ResizeUint8Linear([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* pinputPixels = &inputPixels)
			{
				fixed (byte* poutputPixels = &outputPixels)
				{
					byte* ret = ResizeUint8LinearNative((byte*)pinputPixels, inputW, inputH, inputStrideInBytes, (byte*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_uint8_linear")]
		[return: NativeName(NativeNameType.Type, "unsigned char*")]
		public static string ResizeUint8LinearS([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (byte* pinputPixels = &inputPixels)
			{
				fixed (byte* poutputPixels = &outputPixels)
				{
					string ret = Utils.DecodeStringUTF8(ResizeUint8LinearNative((byte*)pinputPixels, inputW, inputH, inputStrideInBytes, (byte*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_float_linear")]
		[return: NativeName(NativeNameType.Type, "float*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float* ResizeFloatLinearNative([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const float*")] float* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "float*")] float* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float*, int, int, int, float*, int, int, int, StbirPixelLayout, float*>)funcTable[58])(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
			#else
			return (float*)((delegate* unmanaged[Cdecl]<nint, int, int, int, nint, int, int, int, StbirPixelLayout, nint>)funcTable[58])((nint)inputPixels, inputW, inputH, inputStrideInBytes, (nint)outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_float_linear")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* ResizeFloatLinear([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const float*")] float* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "float*")] float* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			float* ret = ResizeFloatLinearNative(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_float_linear")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* ResizeFloatLinear([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const float*")] ref float inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "float*")] float* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (float* pinputPixels = &inputPixels)
			{
				float* ret = ResizeFloatLinearNative((float*)pinputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_float_linear")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* ResizeFloatLinear([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const float*")] float* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "float*")] ref float outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (float* poutputPixels = &outputPixels)
			{
				float* ret = ResizeFloatLinearNative(inputPixels, inputW, inputH, inputStrideInBytes, (float*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_float_linear")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* ResizeFloatLinear([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const float*")] ref float inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "float*")] ref float outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_type")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelType)
		{
			fixed (float* pinputPixels = &inputPixels)
			{
				fixed (float* poutputPixels = &outputPixels)
				{
					float* ret = ResizeFloatLinearNative((float*)pinputPixels, inputW, inputH, inputStrideInBytes, (float*)poutputPixels, outputW, outputH, outputStrideInBytes, pixelType);
					return ret;
				}
			}
		}

		/// <summary>
		/// medium api<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* ResizeNative([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const void*")] void* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "void*")] void* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelLayout, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype dataType, [NativeName(NativeNameType.Param, "edge")] [NativeName(NativeNameType.Type, "stbir_edge")] StbirEdge edge, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "stbir_filter")] StbirFilter filter)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, int, int, void*, int, int, int, StbirPixelLayout, StbirDatatype, StbirEdge, StbirFilter, void*>)funcTable[59])(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelLayout, dataType, edge, filter);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, int, int, int, nint, int, int, int, StbirPixelLayout, StbirDatatype, StbirEdge, StbirFilter, nint>)funcTable[59])((nint)inputPixels, inputW, inputH, inputStrideInBytes, (nint)outputPixels, outputW, outputH, outputStrideInBytes, pixelLayout, dataType, edge, filter);
			#endif
		}

		/// <summary>
		/// medium api<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* Resize([NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const void*")] void* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "void*")] void* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelLayout, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype dataType, [NativeName(NativeNameType.Param, "edge")] [NativeName(NativeNameType.Type, "stbir_edge")] StbirEdge edge, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "stbir_filter")] StbirFilter filter)
		{
			void* ret = ResizeNative(inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelLayout, dataType, edge, filter);
			return ret;
		}

		/// <summary>
		/// First off, you must ALWAYS call stbir_resize_init on your resize structure before any of the other calls!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResizeInitNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const void*")] void* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "void*")] void* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelLayout, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype dataType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<StbirResize*, void*, int, int, int, void*, int, int, int, StbirPixelLayout, StbirDatatype, void>)funcTable[60])(resize, inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelLayout, dataType);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, nint, int, int, int, StbirPixelLayout, StbirDatatype, void>)funcTable[60])((nint)resize, (nint)inputPixels, inputW, inputH, inputStrideInBytes, (nint)outputPixels, outputW, outputH, outputStrideInBytes, pixelLayout, dataType);
			#endif
		}

		/// <summary>
		/// First off, you must ALWAYS call stbir_resize_init on your resize structure before any of the other calls!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ResizeInit([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const void*")] void* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "void*")] void* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelLayout, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype dataType)
		{
			ResizeInitNative(resize, inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelLayout, dataType);
		}

		/// <summary>
		/// First off, you must ALWAYS call stbir_resize_init on your resize structure before any of the other calls!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ResizeInit([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const void*")] void* inputPixels, [NativeName(NativeNameType.Param, "input_w")] [NativeName(NativeNameType.Type, "int")] int inputW, [NativeName(NativeNameType.Param, "input_h")] [NativeName(NativeNameType.Type, "int")] int inputH, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "void*")] void* outputPixels, [NativeName(NativeNameType.Param, "output_w")] [NativeName(NativeNameType.Type, "int")] int outputW, [NativeName(NativeNameType.Param, "output_h")] [NativeName(NativeNameType.Type, "int")] int outputH, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes, [NativeName(NativeNameType.Param, "pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout pixelLayout, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype dataType)
		{
			fixed (StbirResize* presize = &resize)
			{
				ResizeInitNative((StbirResize*)presize, inputPixels, inputW, inputH, inputStrideInBytes, outputPixels, outputW, outputH, outputStrideInBytes, pixelLayout, dataType);
			}
		}

		/// <summary>
		/// ===============================================================<br/>
		/// You can update these parameters any time after resize_init and there is no cost<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_datatypes")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetDatatypesNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype inputType, [NativeName(NativeNameType.Param, "output_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype outputType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<StbirResize*, StbirDatatype, StbirDatatype, void>)funcTable[61])(resize, inputType, outputType);
			#else
			((delegate* unmanaged[Cdecl]<nint, StbirDatatype, StbirDatatype, void>)funcTable[61])((nint)resize, inputType, outputType);
			#endif
		}

		/// <summary>
		/// ===============================================================<br/>
		/// You can update these parameters any time after resize_init and there is no cost<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_datatypes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetDatatypes([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype inputType, [NativeName(NativeNameType.Param, "output_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype outputType)
		{
			SetDatatypesNative(resize, inputType, outputType);
		}

		/// <summary>
		/// ===============================================================<br/>
		/// You can update these parameters any time after resize_init and there is no cost<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_datatypes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetDatatypes([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "input_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype inputType, [NativeName(NativeNameType.Param, "output_type")] [NativeName(NativeNameType.Type, "stbir_datatype")] StbirDatatype outputType)
		{
			fixed (StbirResize* presize = &resize)
			{
				SetDatatypesNative((StbirResize*)presize, inputType, outputType);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_pixel_callbacks")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetPixelCallbacksNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_cb")] [NativeName(NativeNameType.Type, "stbir_input_callback*")] delegate*<void*, void*, int, int, int, void*, void*>* inputCb, [NativeName(NativeNameType.Param, "output_cb")] [NativeName(NativeNameType.Type, "stbir_output_callback*")] delegate*<void*, int, int, void*, void>* outputCb)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<StbirResize*, delegate*<void*, void*, int, int, int, void*, void*>*, delegate*<void*, int, int, void*, void>*, void>)funcTable[62])(resize, inputCb, outputCb);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[62])((nint)resize, (nint)inputCb, (nint)outputCb);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_pixel_callbacks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetPixelCallbacks([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_cb")] [NativeName(NativeNameType.Type, "stbir_input_callback*")] delegate*<void*, void*, int, int, int, void*, void*>* inputCb, [NativeName(NativeNameType.Param, "output_cb")] [NativeName(NativeNameType.Type, "stbir_output_callback*")] delegate*<void*, int, int, void*, void>* outputCb)
		{
			SetPixelCallbacksNative(resize, inputCb, outputCb);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_pixel_callbacks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetPixelCallbacks([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "input_cb")] [NativeName(NativeNameType.Type, "stbir_input_callback*")] delegate*<void*, void*, int, int, int, void*, void*>* inputCb, [NativeName(NativeNameType.Param, "output_cb")] [NativeName(NativeNameType.Type, "stbir_output_callback*")] delegate*<void*, int, int, void*, void>* outputCb)
		{
			fixed (StbirResize* presize = &resize)
			{
				SetPixelCallbacksNative((StbirResize*)presize, inputCb, outputCb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_user_data")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetUserDataNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<StbirResize*, void*, void>)funcTable[63])(resize, userData);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[63])((nint)resize, (nint)userData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_user_data")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetUserData([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			SetUserDataNative(resize, userData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_user_data")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetUserData([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			fixed (StbirResize* presize = &resize)
			{
				SetUserDataNative((StbirResize*)presize, userData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_buffer_ptrs")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetBufferPtrsNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const void*")] void* inputPixels, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "void*")] void* outputPixels, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<StbirResize*, void*, int, void*, int, void>)funcTable[64])(resize, inputPixels, inputStrideInBytes, outputPixels, outputStrideInBytes);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, nint, int, void>)funcTable[64])((nint)resize, (nint)inputPixels, inputStrideInBytes, (nint)outputPixels, outputStrideInBytes);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_buffer_ptrs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBufferPtrs([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const void*")] void* inputPixels, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "void*")] void* outputPixels, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes)
		{
			SetBufferPtrsNative(resize, inputPixels, inputStrideInBytes, outputPixels, outputStrideInBytes);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_buffer_ptrs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBufferPtrs([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "input_pixels")] [NativeName(NativeNameType.Type, "const void*")] void* inputPixels, [NativeName(NativeNameType.Param, "input_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int inputStrideInBytes, [NativeName(NativeNameType.Param, "output_pixels")] [NativeName(NativeNameType.Type, "void*")] void* outputPixels, [NativeName(NativeNameType.Param, "output_stride_in_bytes")] [NativeName(NativeNameType.Type, "int")] int outputStrideInBytes)
		{
			fixed (StbirResize* presize = &resize)
			{
				SetBufferPtrsNative((StbirResize*)presize, inputPixels, inputStrideInBytes, outputPixels, outputStrideInBytes);
			}
		}

		/// <summary>
		/// ===============================================================<br/>
		/// If you call any of these functions, you will trigger a sampler rebuild!<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_pixel_layouts")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetPixelLayoutsNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout inputPixelLayout, [NativeName(NativeNameType.Param, "output_pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout outputPixelLayout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, StbirPixelLayout, StbirPixelLayout, int>)funcTable[65])(resize, inputPixelLayout, outputPixelLayout);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, StbirPixelLayout, StbirPixelLayout, int>)funcTable[65])((nint)resize, inputPixelLayout, outputPixelLayout);
			#endif
		}

		/// <summary>
		/// ===============================================================<br/>
		/// If you call any of these functions, you will trigger a sampler rebuild!<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_pixel_layouts")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetPixelLayouts([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "input_pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout inputPixelLayout, [NativeName(NativeNameType.Param, "output_pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout outputPixelLayout)
		{
			int ret = SetPixelLayoutsNative(resize, inputPixelLayout, outputPixelLayout);
			return ret;
		}

		/// <summary>
		/// ===============================================================<br/>
		/// If you call any of these functions, you will trigger a sampler rebuild!<br/>
		/// --------------------------------<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_pixel_layouts")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetPixelLayouts([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "input_pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout inputPixelLayout, [NativeName(NativeNameType.Param, "output_pixel_layout")] [NativeName(NativeNameType.Type, "stbir_pixel_layout")] StbirPixelLayout outputPixelLayout)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = SetPixelLayoutsNative((StbirResize*)presize, inputPixelLayout, outputPixelLayout);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_edgemodes")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetEdgemodesNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "horizontal_edge")] [NativeName(NativeNameType.Type, "stbir_edge")] StbirEdge horizontalEdge, [NativeName(NativeNameType.Param, "vertical_edge")] [NativeName(NativeNameType.Type, "stbir_edge")] StbirEdge verticalEdge)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, StbirEdge, StbirEdge, int>)funcTable[66])(resize, horizontalEdge, verticalEdge);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, StbirEdge, StbirEdge, int>)funcTable[66])((nint)resize, horizontalEdge, verticalEdge);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_edgemodes")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetEdgemodes([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "horizontal_edge")] [NativeName(NativeNameType.Type, "stbir_edge")] StbirEdge horizontalEdge, [NativeName(NativeNameType.Param, "vertical_edge")] [NativeName(NativeNameType.Type, "stbir_edge")] StbirEdge verticalEdge)
		{
			int ret = SetEdgemodesNative(resize, horizontalEdge, verticalEdge);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_edgemodes")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetEdgemodes([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "horizontal_edge")] [NativeName(NativeNameType.Type, "stbir_edge")] StbirEdge horizontalEdge, [NativeName(NativeNameType.Param, "vertical_edge")] [NativeName(NativeNameType.Type, "stbir_edge")] StbirEdge verticalEdge)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = SetEdgemodesNative((StbirResize*)presize, horizontalEdge, verticalEdge);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_filters")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetFiltersNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "horizontal_filter")] [NativeName(NativeNameType.Type, "stbir_filter")] StbirFilter horizontalFilter, [NativeName(NativeNameType.Param, "vertical_filter")] [NativeName(NativeNameType.Type, "stbir_filter")] StbirFilter verticalFilter)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, StbirFilter, StbirFilter, int>)funcTable[67])(resize, horizontalFilter, verticalFilter);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, StbirFilter, StbirFilter, int>)funcTable[67])((nint)resize, horizontalFilter, verticalFilter);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_filters")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetFilters([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "horizontal_filter")] [NativeName(NativeNameType.Type, "stbir_filter")] StbirFilter horizontalFilter, [NativeName(NativeNameType.Param, "vertical_filter")] [NativeName(NativeNameType.Type, "stbir_filter")] StbirFilter verticalFilter)
		{
			int ret = SetFiltersNative(resize, horizontalFilter, verticalFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_filters")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetFilters([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "horizontal_filter")] [NativeName(NativeNameType.Type, "stbir_filter")] StbirFilter horizontalFilter, [NativeName(NativeNameType.Param, "vertical_filter")] [NativeName(NativeNameType.Type, "stbir_filter")] StbirFilter verticalFilter)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = SetFiltersNative((StbirResize*)presize, horizontalFilter, verticalFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_filter_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetFilterCallbacksNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "horizontal_filter")] [NativeName(NativeNameType.Type, "stbir__kernel_callback*")] delegate*<float, float, void*, float>* horizontalFilter, [NativeName(NativeNameType.Param, "horizontal_support")] [NativeName(NativeNameType.Type, "stbir__support_callback*")] delegate*<float, void*, float>* horizontalSupport, [NativeName(NativeNameType.Param, "vertical_filter")] [NativeName(NativeNameType.Type, "stbir__kernel_callback*")] delegate*<float, float, void*, float>* verticalFilter, [NativeName(NativeNameType.Param, "vertical_support")] [NativeName(NativeNameType.Type, "stbir__support_callback*")] delegate*<float, void*, float>* verticalSupport)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, delegate*<float, float, void*, float>*, delegate*<float, void*, float>*, delegate*<float, float, void*, float>*, delegate*<float, void*, float>*, int>)funcTable[68])(resize, horizontalFilter, horizontalSupport, verticalFilter, verticalSupport);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, int>)funcTable[68])((nint)resize, (nint)horizontalFilter, (nint)horizontalSupport, (nint)verticalFilter, (nint)verticalSupport);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_filter_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetFilterCallbacks([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "horizontal_filter")] [NativeName(NativeNameType.Type, "stbir__kernel_callback*")] delegate*<float, float, void*, float>* horizontalFilter, [NativeName(NativeNameType.Param, "horizontal_support")] [NativeName(NativeNameType.Type, "stbir__support_callback*")] delegate*<float, void*, float>* horizontalSupport, [NativeName(NativeNameType.Param, "vertical_filter")] [NativeName(NativeNameType.Type, "stbir__kernel_callback*")] delegate*<float, float, void*, float>* verticalFilter, [NativeName(NativeNameType.Param, "vertical_support")] [NativeName(NativeNameType.Type, "stbir__support_callback*")] delegate*<float, void*, float>* verticalSupport)
		{
			int ret = SetFilterCallbacksNative(resize, horizontalFilter, horizontalSupport, verticalFilter, verticalSupport);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_filter_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetFilterCallbacks([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "horizontal_filter")] [NativeName(NativeNameType.Type, "stbir__kernel_callback*")] delegate*<float, float, void*, float>* horizontalFilter, [NativeName(NativeNameType.Param, "horizontal_support")] [NativeName(NativeNameType.Type, "stbir__support_callback*")] delegate*<float, void*, float>* horizontalSupport, [NativeName(NativeNameType.Param, "vertical_filter")] [NativeName(NativeNameType.Type, "stbir__kernel_callback*")] delegate*<float, float, void*, float>* verticalFilter, [NativeName(NativeNameType.Param, "vertical_support")] [NativeName(NativeNameType.Type, "stbir__support_callback*")] delegate*<float, void*, float>* verticalSupport)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = SetFilterCallbacksNative((StbirResize*)presize, horizontalFilter, horizontalSupport, verticalFilter, verticalSupport);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_pixel_subrect")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetPixelSubrectNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "subx")] [NativeName(NativeNameType.Type, "int")] int subx, [NativeName(NativeNameType.Param, "suby")] [NativeName(NativeNameType.Type, "int")] int suby, [NativeName(NativeNameType.Param, "subw")] [NativeName(NativeNameType.Type, "int")] int subw, [NativeName(NativeNameType.Param, "subh")] [NativeName(NativeNameType.Type, "int")] int subh)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, int, int, int, int, int>)funcTable[69])(resize, subx, suby, subw, subh);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, int>)funcTable[69])((nint)resize, subx, suby, subw, subh);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_pixel_subrect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetPixelSubrect([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "subx")] [NativeName(NativeNameType.Type, "int")] int subx, [NativeName(NativeNameType.Param, "suby")] [NativeName(NativeNameType.Type, "int")] int suby, [NativeName(NativeNameType.Param, "subw")] [NativeName(NativeNameType.Type, "int")] int subw, [NativeName(NativeNameType.Param, "subh")] [NativeName(NativeNameType.Type, "int")] int subh)
		{
			int ret = SetPixelSubrectNative(resize, subx, suby, subw, subh);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_pixel_subrect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetPixelSubrect([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "subx")] [NativeName(NativeNameType.Type, "int")] int subx, [NativeName(NativeNameType.Param, "suby")] [NativeName(NativeNameType.Type, "int")] int suby, [NativeName(NativeNameType.Param, "subw")] [NativeName(NativeNameType.Type, "int")] int subw, [NativeName(NativeNameType.Param, "subh")] [NativeName(NativeNameType.Type, "int")] int subh)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = SetPixelSubrectNative((StbirResize*)presize, subx, suby, subw, subh);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_input_subrect")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetInputSubrectNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "s0")] [NativeName(NativeNameType.Type, "double")] double s0, [NativeName(NativeNameType.Param, "t0")] [NativeName(NativeNameType.Type, "double")] double t0, [NativeName(NativeNameType.Param, "s1")] [NativeName(NativeNameType.Type, "double")] double s1, [NativeName(NativeNameType.Param, "t1")] [NativeName(NativeNameType.Type, "double")] double t1)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, double, double, double, double, int>)funcTable[70])(resize, s0, t0, s1, t1);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, double, double, double, double, int>)funcTable[70])((nint)resize, s0, t0, s1, t1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_input_subrect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetInputSubrect([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "s0")] [NativeName(NativeNameType.Type, "double")] double s0, [NativeName(NativeNameType.Param, "t0")] [NativeName(NativeNameType.Type, "double")] double t0, [NativeName(NativeNameType.Param, "s1")] [NativeName(NativeNameType.Type, "double")] double s1, [NativeName(NativeNameType.Param, "t1")] [NativeName(NativeNameType.Type, "double")] double t1)
		{
			int ret = SetInputSubrectNative(resize, s0, t0, s1, t1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_input_subrect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetInputSubrect([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "s0")] [NativeName(NativeNameType.Type, "double")] double s0, [NativeName(NativeNameType.Param, "t0")] [NativeName(NativeNameType.Type, "double")] double t0, [NativeName(NativeNameType.Param, "s1")] [NativeName(NativeNameType.Type, "double")] double s1, [NativeName(NativeNameType.Param, "t1")] [NativeName(NativeNameType.Type, "double")] double t1)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = SetInputSubrectNative((StbirResize*)presize, s0, t0, s1, t1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_output_pixel_subrect")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetOutputPixelSubrectNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "subx")] [NativeName(NativeNameType.Type, "int")] int subx, [NativeName(NativeNameType.Param, "suby")] [NativeName(NativeNameType.Type, "int")] int suby, [NativeName(NativeNameType.Param, "subw")] [NativeName(NativeNameType.Type, "int")] int subw, [NativeName(NativeNameType.Param, "subh")] [NativeName(NativeNameType.Type, "int")] int subh)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, int, int, int, int, int>)funcTable[71])(resize, subx, suby, subw, subh);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, int>)funcTable[71])((nint)resize, subx, suby, subw, subh);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_output_pixel_subrect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetOutputPixelSubrect([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "subx")] [NativeName(NativeNameType.Type, "int")] int subx, [NativeName(NativeNameType.Param, "suby")] [NativeName(NativeNameType.Type, "int")] int suby, [NativeName(NativeNameType.Param, "subw")] [NativeName(NativeNameType.Type, "int")] int subw, [NativeName(NativeNameType.Param, "subh")] [NativeName(NativeNameType.Type, "int")] int subh)
		{
			int ret = SetOutputPixelSubrectNative(resize, subx, suby, subw, subh);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_output_pixel_subrect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetOutputPixelSubrect([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "subx")] [NativeName(NativeNameType.Type, "int")] int subx, [NativeName(NativeNameType.Param, "suby")] [NativeName(NativeNameType.Type, "int")] int suby, [NativeName(NativeNameType.Param, "subw")] [NativeName(NativeNameType.Type, "int")] int subw, [NativeName(NativeNameType.Param, "subh")] [NativeName(NativeNameType.Type, "int")] int subh)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = SetOutputPixelSubrectNative((StbirResize*)presize, subx, suby, subw, subh);
				return ret;
			}
		}

		/// <summary>
		/// when inputting AND outputting non-premultiplied alpha pixels, we use a slower but higher quality technique<br/>
		/// that fills the zero alpha pixel's RGB values with something plausible.  If you don't care about areas of<br/>
		/// zero alpha, you can call this function to get about a 25% speed improvement for STBIR_RGBA to STBIR_RGBA<br/>
		/// types of resizes.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_non_pm_alpha_speed_over_quality")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetNonPmAlphaSpeedOverQualityNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "non_pma_alpha_speed_over_quality")] [NativeName(NativeNameType.Type, "int")] int nonPmaAlphaSpeedOverQuality)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, int, int>)funcTable[72])(resize, nonPmaAlphaSpeedOverQuality);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[72])((nint)resize, nonPmaAlphaSpeedOverQuality);
			#endif
		}

		/// <summary>
		/// when inputting AND outputting non-premultiplied alpha pixels, we use a slower but higher quality technique<br/>
		/// that fills the zero alpha pixel's RGB values with something plausible.  If you don't care about areas of<br/>
		/// zero alpha, you can call this function to get about a 25% speed improvement for STBIR_RGBA to STBIR_RGBA<br/>
		/// types of resizes.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_non_pm_alpha_speed_over_quality")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetNonPmAlphaSpeedOverQuality([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "non_pma_alpha_speed_over_quality")] [NativeName(NativeNameType.Type, "int")] int nonPmaAlphaSpeedOverQuality)
		{
			int ret = SetNonPmAlphaSpeedOverQualityNative(resize, nonPmaAlphaSpeedOverQuality);
			return ret;
		}

		/// <summary>
		/// when inputting AND outputting non-premultiplied alpha pixels, we use a slower but higher quality technique<br/>
		/// that fills the zero alpha pixel's RGB values with something plausible.  If you don't care about areas of<br/>
		/// zero alpha, you can call this function to get about a 25% speed improvement for STBIR_RGBA to STBIR_RGBA<br/>
		/// types of resizes.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_set_non_pm_alpha_speed_over_quality")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetNonPmAlphaSpeedOverQuality([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "non_pma_alpha_speed_over_quality")] [NativeName(NativeNameType.Type, "int")] int nonPmaAlphaSpeedOverQuality)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = SetNonPmAlphaSpeedOverQualityNative((StbirResize*)presize, nonPmaAlphaSpeedOverQuality);
				return ret;
			}
		}

		/// <summary>
		/// This builds the samplers and does one allocation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_build_samplers")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int BuildSamplersNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, int>)funcTable[73])(resize);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[73])((nint)resize);
			#endif
		}

		/// <summary>
		/// This builds the samplers and does one allocation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_build_samplers")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BuildSamplers([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize)
		{
			int ret = BuildSamplersNative(resize);
			return ret;
		}

		/// <summary>
		/// This builds the samplers and does one allocation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_build_samplers")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BuildSamplers([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = BuildSamplersNative((StbirResize*)presize);
				return ret;
			}
		}

		/// <summary>
		/// You MUST call this, if you call stbir_build_samplers or stbir_build_samplers_with_splits<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_free_samplers")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FreeSamplersNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<StbirResize*, void>)funcTable[74])(resize);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[74])((nint)resize);
			#endif
		}

		/// <summary>
		/// You MUST call this, if you call stbir_build_samplers or stbir_build_samplers_with_splits<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_free_samplers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FreeSamplers([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize)
		{
			FreeSamplersNative(resize);
		}

		/// <summary>
		/// You MUST call this, if you call stbir_build_samplers or stbir_build_samplers_with_splits<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_free_samplers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FreeSamplers([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize)
		{
			fixed (StbirResize* presize = &resize)
			{
				FreeSamplersNative((StbirResize*)presize);
			}
		}

		/// <summary>
		/// And this is the main function to perform the resize synchronously on one thread.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_extended")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ResizeExtendedNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, int>)funcTable[75])(resize);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[75])((nint)resize);
			#endif
		}

		/// <summary>
		/// And this is the main function to perform the resize synchronously on one thread.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_extended")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ResizeExtended([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize)
		{
			int ret = ResizeExtendedNative(resize);
			return ret;
		}

		/// <summary>
		/// And this is the main function to perform the resize synchronously on one thread.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_extended")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ResizeExtended([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = ResizeExtendedNative((StbirResize*)presize);
				return ret;
			}
		}

		/// <summary>
		/// This will build samplers for threading.<br/>
		/// You can pass in the number of threads you'd like to use (try_splits).<br/>
		/// It returns the number of splits (threads) that you can call it with.<br/>
		/// It might be less if the image resize can't be split up that many ways.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_build_samplers_with_splits")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int BuildSamplersWithSplitsNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "try_splits")] [NativeName(NativeNameType.Type, "int")] int trySplits)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, int, int>)funcTable[76])(resize, trySplits);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[76])((nint)resize, trySplits);
			#endif
		}

		/// <summary>
		/// This will build samplers for threading.<br/>
		/// You can pass in the number of threads you'd like to use (try_splits).<br/>
		/// It returns the number of splits (threads) that you can call it with.<br/>
		/// It might be less if the image resize can't be split up that many ways.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_build_samplers_with_splits")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BuildSamplersWithSplits([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "try_splits")] [NativeName(NativeNameType.Type, "int")] int trySplits)
		{
			int ret = BuildSamplersWithSplitsNative(resize, trySplits);
			return ret;
		}

		/// <summary>
		/// This will build samplers for threading.<br/>
		/// You can pass in the number of threads you'd like to use (try_splits).<br/>
		/// It returns the number of splits (threads) that you can call it with.<br/>
		/// It might be less if the image resize can't be split up that many ways.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_build_samplers_with_splits")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BuildSamplersWithSplits([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "try_splits")] [NativeName(NativeNameType.Type, "int")] int trySplits)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = BuildSamplersWithSplitsNative((StbirResize*)presize, trySplits);
				return ret;
			}
		}

		/// <summary>
		/// Usually, you will always call stbir_resize_split with split_start as the thread_index<br/>
		/// and "1" for the split_count.<br/>
		/// But, if you have a weird situation where you MIGHT want 8 threads, but sometimes<br/>
		/// only 4 threads, you can use 0,2,4,6 for the split_start's and use "2" for the<br/>
		/// split_count each time to turn in into a 4 thread resize. (This is unusual).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_extended_split")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ResizeExtendedSplitNative([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "split_start")] [NativeName(NativeNameType.Type, "int")] int splitStart, [NativeName(NativeNameType.Param, "split_count")] [NativeName(NativeNameType.Type, "int")] int splitCount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbirResize*, int, int, int>)funcTable[77])(resize, splitStart, splitCount);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int>)funcTable[77])((nint)resize, splitStart, splitCount);
			#endif
		}

		/// <summary>
		/// Usually, you will always call stbir_resize_split with split_start as the thread_index<br/>
		/// and "1" for the split_count.<br/>
		/// But, if you have a weird situation where you MIGHT want 8 threads, but sometimes<br/>
		/// only 4 threads, you can use 0,2,4,6 for the split_start's and use "2" for the<br/>
		/// split_count each time to turn in into a 4 thread resize. (This is unusual).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_extended_split")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ResizeExtendedSplit([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] StbirResize* resize, [NativeName(NativeNameType.Param, "split_start")] [NativeName(NativeNameType.Type, "int")] int splitStart, [NativeName(NativeNameType.Param, "split_count")] [NativeName(NativeNameType.Type, "int")] int splitCount)
		{
			int ret = ResizeExtendedSplitNative(resize, splitStart, splitCount);
			return ret;
		}

		/// <summary>
		/// Usually, you will always call stbir_resize_split with split_start as the thread_index<br/>
		/// and "1" for the split_count.<br/>
		/// But, if you have a weird situation where you MIGHT want 8 threads, but sometimes<br/>
		/// only 4 threads, you can use 0,2,4,6 for the split_start's and use "2" for the<br/>
		/// split_count each time to turn in into a 4 thread resize. (This is unusual).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbir_resize_extended_split")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ResizeExtendedSplit([NativeName(NativeNameType.Param, "resize")] [NativeName(NativeNameType.Type, "STBIR_RESIZE*")] ref StbirResize resize, [NativeName(NativeNameType.Param, "split_start")] [NativeName(NativeNameType.Type, "int")] int splitStart, [NativeName(NativeNameType.Param, "split_count")] [NativeName(NativeNameType.Type, "int")] int splitCount)
		{
			fixed (StbirResize* presize = &resize)
			{
				int ret = ResizeExtendedSplitNative((StbirResize*)presize, splitStart, splitCount);
				return ret;
			}
		}

	}
}
