// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.StbImage
{
	public unsafe partial class StbImage
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* py = &y)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfFromCallbacksNative(clbk, user, x, (int*)py, (int*)pchannelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				fixed (int* py = &y)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfFromCallbacksNative((StbiIoCallbacks*)pclbk, user, x, (int*)py, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfFromCallbacksNative(clbk, user, (int*)px, (int*)py, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						fixed (int* pchannelsInFile = &channelsInFile)
						{
							float* ret = LoadfFromCallbacksNative((StbiIoCallbacks*)pclbk, user, (int*)px, (int*)py, (int*)pchannelsInFile, desiredChannels);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float* LoadfNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int*, int*, int, float*>)funcTable[11])(filename, x, y, channelsInFile, desiredChannels);
			#else
			return (float*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int, nint>)funcTable[11])((nint)filename, (nint)x, (nint)y, (nint)channelsInFile, desiredChannels);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			float* ret = LoadfNative(filename, x, y, channelsInFile, desiredChannels);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = &filename)
			{
				float* ret = LoadfNative((byte*)pfilename, x, y, channelsInFile, desiredChannels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = filename)
			{
				float* ret = LoadfNative((byte*)pfilename, x, y, channelsInFile, desiredChannels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			float* ret = LoadfNative(pStr0, x, y, channelsInFile, desiredChannels);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* px = &x)
			{
				float* ret = LoadfNative(filename, (int*)px, y, channelsInFile, desiredChannels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* px = &x)
				{
					float* ret = LoadfNative((byte*)pfilename, (int*)px, y, channelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* px = &x)
				{
					float* ret = LoadfNative((byte*)pfilename, (int*)px, y, channelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* px = &x)
			{
				float* ret = LoadfNative(pStr0, (int*)px, y, channelsInFile, desiredChannels);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* py = &y)
			{
				float* ret = LoadfNative(filename, x, (int*)py, channelsInFile, desiredChannels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* py = &y)
				{
					float* ret = LoadfNative((byte*)pfilename, x, (int*)py, channelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* py = &y)
				{
					float* ret = LoadfNative((byte*)pfilename, x, (int*)py, channelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* py = &y)
			{
				float* ret = LoadfNative(pStr0, x, (int*)py, channelsInFile, desiredChannels);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					float* ret = LoadfNative(filename, (int*)px, (int*)py, channelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						float* ret = LoadfNative((byte*)pfilename, (int*)px, (int*)py, channelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						float* ret = LoadfNative((byte*)pfilename, (int*)px, (int*)py, channelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					float* ret = LoadfNative(pStr0, (int*)px, (int*)py, channelsInFile, desiredChannels);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* pchannelsInFile = &channelsInFile)
			{
				float* ret = LoadfNative(filename, x, y, (int*)pchannelsInFile, desiredChannels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfNative((byte*)pfilename, x, y, (int*)pchannelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfNative((byte*)pfilename, x, y, (int*)pchannelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pchannelsInFile = &channelsInFile)
			{
				float* ret = LoadfNative(pStr0, x, y, (int*)pchannelsInFile, desiredChannels);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* px = &x)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfNative(filename, (int*)px, y, (int*)pchannelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfNative((byte*)pfilename, (int*)px, y, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfNative((byte*)pfilename, (int*)px, y, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* px = &x)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfNative(pStr0, (int*)px, y, (int*)pchannelsInFile, desiredChannels);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* py = &y)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfNative(filename, x, (int*)py, (int*)pchannelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* py = &y)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfNative((byte*)pfilename, x, (int*)py, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* py = &y)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfNative((byte*)pfilename, x, (int*)py, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* py = &y)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfNative(pStr0, x, (int*)py, (int*)pchannelsInFile, desiredChannels);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfNative(filename, (int*)px, (int*)py, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						fixed (int* pchannelsInFile = &channelsInFile)
						{
							float* ret = LoadfNative((byte*)pfilename, (int*)px, (int*)py, (int*)pchannelsInFile, desiredChannels);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						fixed (int* pchannelsInFile = &channelsInFile)
						{
							float* ret = LoadfNative((byte*)pfilename, (int*)px, (int*)py, (int*)pchannelsInFile, desiredChannels);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* Loadf([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfNative(pStr0, (int*)px, (int*)py, (int*)pchannelsInFile, desiredChannels);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float* LoadfFromFileNative([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<FileHandle*, int*, int*, int*, int, float*>)funcTable[12])(f, x, y, channelsInFile, desiredChannels);
			#else
			return (float*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int, nint>)funcTable[12])((nint)f, (nint)x, (nint)y, (nint)channelsInFile, desiredChannels);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			float* ret = LoadfFromFileNative(f, x, y, channelsInFile, desiredChannels);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (FileHandle* pf = &f)
			{
				float* ret = LoadfFromFileNative((FileHandle*)pf, x, y, channelsInFile, desiredChannels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* px = &x)
			{
				float* ret = LoadfFromFileNative(f, (int*)px, y, channelsInFile, desiredChannels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* px = &x)
				{
					float* ret = LoadfFromFileNative((FileHandle*)pf, (int*)px, y, channelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* py = &y)
			{
				float* ret = LoadfFromFileNative(f, x, (int*)py, channelsInFile, desiredChannels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* py = &y)
				{
					float* ret = LoadfFromFileNative((FileHandle*)pf, x, (int*)py, channelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					float* ret = LoadfFromFileNative(f, (int*)px, (int*)py, channelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] int* channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						float* ret = LoadfFromFileNative((FileHandle*)pf, (int*)px, (int*)py, channelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* pchannelsInFile = &channelsInFile)
			{
				float* ret = LoadfFromFileNative(f, x, y, (int*)pchannelsInFile, desiredChannels);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfFromFileNative((FileHandle*)pf, x, y, (int*)pchannelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* px = &x)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfFromFileNative(f, (int*)px, y, (int*)pchannelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* px = &x)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfFromFileNative((FileHandle*)pf, (int*)px, y, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* py = &y)
			{
				fixed (int* pchannelsInFile = &channelsInFile)
				{
					float* ret = LoadfFromFileNative(f, x, (int*)py, (int*)pchannelsInFile, desiredChannels);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* py = &y)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfFromFileNative((FileHandle*)pf, x, (int*)py, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					fixed (int* pchannelsInFile = &channelsInFile)
					{
						float* ret = LoadfFromFileNative(f, (int*)px, (int*)py, (int*)pchannelsInFile, desiredChannels);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_loadf_from_file")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* LoadfFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "channels_in_file")] [NativeName(NativeNameType.Type, "int*")] ref int channelsInFile, [NativeName(NativeNameType.Param, "desired_channels")] [NativeName(NativeNameType.Type, "int")] int desiredChannels)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						fixed (int* pchannelsInFile = &channelsInFile)
						{
							float* ret = LoadfFromFileNative((FileHandle*)pf, (int*)px, (int*)py, (int*)pchannelsInFile, desiredChannels);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_hdr_to_ldr_gamma")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void HdrToLdrGammaNative([NativeName(NativeNameType.Param, "gamma")] [NativeName(NativeNameType.Type, "float")] float gamma)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[13])(gamma);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[13])(gamma);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_hdr_to_ldr_gamma")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void HdrToLdrGamma([NativeName(NativeNameType.Param, "gamma")] [NativeName(NativeNameType.Type, "float")] float gamma)
		{
			HdrToLdrGammaNative(gamma);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_hdr_to_ldr_scale")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void HdrToLdrScaleNative([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[14])(scale);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[14])(scale);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_hdr_to_ldr_scale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void HdrToLdrScale([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			HdrToLdrScaleNative(scale);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_ldr_to_hdr_gamma")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LdrToHdrGammaNative([NativeName(NativeNameType.Param, "gamma")] [NativeName(NativeNameType.Type, "float")] float gamma)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[15])(gamma);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[15])(gamma);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_ldr_to_hdr_gamma")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LdrToHdrGamma([NativeName(NativeNameType.Param, "gamma")] [NativeName(NativeNameType.Type, "float")] float gamma)
		{
			LdrToHdrGammaNative(gamma);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_ldr_to_hdr_scale")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LdrToHdrScaleNative([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[16])(scale);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[16])(scale);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_ldr_to_hdr_scale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LdrToHdrScale([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			LdrToHdrScaleNative(scale);
		}

		/// <summary>
		/// stbi_is_hdr is always defined, but always returns false if STBI_NO_HDR<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsHdrFromCallbacksNative([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbiIoCallbacks*, void*, int>)funcTable[17])(clbk, user);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[17])((nint)clbk, (nint)user);
			#endif
		}

		/// <summary>
		/// stbi_is_hdr is always defined, but always returns false if STBI_NO_HDR<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdrFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user)
		{
			int ret = IsHdrFromCallbacksNative(clbk, user);
			return ret;
		}

		/// <summary>
		/// stbi_is_hdr is always defined, but always returns false if STBI_NO_HDR<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdrFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				int ret = IsHdrFromCallbacksNative((StbiIoCallbacks*)pclbk, user);
				return ret;
			}
		}

		/// <summary>
		/// these is-hdr-or-not is defined independent of whether STBI_NO_LINEAR is<br/>
		/// defined, for API simplicity; if STBI_NO_LINEAR is defined, it always<br/>
		/// reports false!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsHdrFromMemoryNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int>)funcTable[18])(buffer, len);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[18])((nint)buffer, len);
			#endif
		}

		/// <summary>
		/// these is-hdr-or-not is defined independent of whether STBI_NO_LINEAR is<br/>
		/// defined, for API simplicity; if STBI_NO_LINEAR is defined, it always<br/>
		/// reports false!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdrFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			int ret = IsHdrFromMemoryNative(buffer, len);
			return ret;
		}

		/// <summary>
		/// these is-hdr-or-not is defined independent of whether STBI_NO_LINEAR is<br/>
		/// defined, for API simplicity; if STBI_NO_LINEAR is defined, it always<br/>
		/// reports false!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdrFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = IsHdrFromMemoryNative((byte*)pbuffer, len);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsHdrNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)funcTable[19])(filename);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[19])((nint)filename);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename)
		{
			int ret = IsHdrNative(filename);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = IsHdrNative((byte*)pfilename);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = IsHdrNative((byte*)pfilename);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdr([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = IsHdrNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsHdrFromFileNative([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<FileHandle*, int>)funcTable[20])(f);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[20])((nint)f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdrFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f)
		{
			int ret = IsHdrFromFileNative(f);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_hdr_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int IsHdrFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f)
		{
			fixed (FileHandle* pf = &f)
			{
				int ret = IsHdrFromFileNative((FileHandle*)pf);
				return ret;
			}
		}

		/// <summary>
		/// get a VERY brief reason for failure<br/>
		/// on most compilers (and ALL modern mainstream compilers) this is threadsafe<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_failure_reason")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* FailureReasonNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*>)funcTable[21])();
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint>)funcTable[21])();
			#endif
		}

		/// <summary>
		/// get a VERY brief reason for failure<br/>
		/// on most compilers (and ALL modern mainstream compilers) this is threadsafe<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_failure_reason")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FailureReason()
		{
			byte* ret = FailureReasonNative();
			return ret;
		}

		/// <summary>
		/// get a VERY brief reason for failure<br/>
		/// on most compilers (and ALL modern mainstream compilers) this is threadsafe<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_failure_reason")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FailureReasonS()
		{
			string ret = Utils.DecodeStringUTF8(FailureReasonNative());
			return ret;
		}

		/// <summary>
		/// free the loaded image -- this is just free()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_image_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImageFreeNative([NativeName(NativeNameType.Param, "retval_from_stbi_load")] [NativeName(NativeNameType.Type, "void*")] void* retvalFromStbiLoad)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)funcTable[22])(retvalFromStbiLoad);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[22])((nint)retvalFromStbiLoad);
			#endif
		}

		/// <summary>
		/// free the loaded image -- this is just free()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_image_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImageFree([NativeName(NativeNameType.Param, "retval_from_stbi_load")] [NativeName(NativeNameType.Type, "void*")] void* retvalFromStbiLoad)
		{
			ImageFreeNative(retvalFromStbiLoad);
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int InfoFromMemoryNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int*, int*, int*, int>)funcTable[23])(buffer, len, x, y, comp);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, nint, int>)funcTable[23])((nint)buffer, len, (nint)x, (nint)y, (nint)comp);
			#endif
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			int ret = InfoFromMemoryNative(buffer, len, x, y, comp);
			return ret;
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = InfoFromMemoryNative((byte*)pbuffer, len, x, y, comp);
				return ret;
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* px = &x)
			{
				int ret = InfoFromMemoryNative(buffer, len, (int*)px, y, comp);
				return ret;
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* px = &x)
				{
					int ret = InfoFromMemoryNative((byte*)pbuffer, len, (int*)px, y, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* py = &y)
			{
				int ret = InfoFromMemoryNative(buffer, len, x, (int*)py, comp);
				return ret;
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* py = &y)
				{
					int ret = InfoFromMemoryNative((byte*)pbuffer, len, x, (int*)py, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					int ret = InfoFromMemoryNative(buffer, len, (int*)px, (int*)py, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						int ret = InfoFromMemoryNative((byte*)pbuffer, len, (int*)px, (int*)py, comp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* pcomp = &comp)
			{
				int ret = InfoFromMemoryNative(buffer, len, x, y, (int*)pcomp);
				return ret;
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoFromMemoryNative((byte*)pbuffer, len, x, y, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoFromMemoryNative(buffer, len, (int*)px, y, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* px = &x)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoFromMemoryNative((byte*)pbuffer, len, (int*)px, y, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* py = &y)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoFromMemoryNative(buffer, len, x, (int*)py, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoFromMemoryNative((byte*)pbuffer, len, x, (int*)py, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoFromMemoryNative(buffer, len, (int*)px, (int*)py, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// get image dimensions <br/>
		/// &<br/>
		/// components without fully decoding<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						fixed (int* pcomp = &comp)
						{
							int ret = InfoFromMemoryNative((byte*)pbuffer, len, (int*)px, (int*)py, (int*)pcomp);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int InfoFromCallbacksNative([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbiIoCallbacks*, void*, int*, int*, int*, int>)funcTable[24])(clbk, user, x, y, comp);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, int>)funcTable[24])((nint)clbk, (nint)user, (nint)x, (nint)y, (nint)comp);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			int ret = InfoFromCallbacksNative(clbk, user, x, y, comp);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				int ret = InfoFromCallbacksNative((StbiIoCallbacks*)pclbk, user, x, y, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* px = &x)
			{
				int ret = InfoFromCallbacksNative(clbk, user, (int*)px, y, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				fixed (int* px = &x)
				{
					int ret = InfoFromCallbacksNative((StbiIoCallbacks*)pclbk, user, (int*)px, y, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* py = &y)
			{
				int ret = InfoFromCallbacksNative(clbk, user, x, (int*)py, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				fixed (int* py = &y)
				{
					int ret = InfoFromCallbacksNative((StbiIoCallbacks*)pclbk, user, x, (int*)py, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					int ret = InfoFromCallbacksNative(clbk, user, (int*)px, (int*)py, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						int ret = InfoFromCallbacksNative((StbiIoCallbacks*)pclbk, user, (int*)px, (int*)py, comp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* pcomp = &comp)
			{
				int ret = InfoFromCallbacksNative(clbk, user, x, y, (int*)pcomp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoFromCallbacksNative((StbiIoCallbacks*)pclbk, user, x, y, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoFromCallbacksNative(clbk, user, (int*)px, y, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				fixed (int* px = &x)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoFromCallbacksNative((StbiIoCallbacks*)pclbk, user, (int*)px, y, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* py = &y)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoFromCallbacksNative(clbk, user, x, (int*)py, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoFromCallbacksNative((StbiIoCallbacks*)pclbk, user, x, (int*)py, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoFromCallbacksNative(clbk, user, (int*)px, (int*)py, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						fixed (int* pcomp = &comp)
						{
							int ret = InfoFromCallbacksNative((StbiIoCallbacks*)pclbk, user, (int*)px, (int*)py, (int*)pcomp);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int Is16BitFromMemoryNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int>)funcTable[25])(buffer, len);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[25])((nint)buffer, len);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16BitFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			int ret = Is16BitFromMemoryNative(buffer, len);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit_from_memory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16BitFromMemory([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const stbi_uc*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = Is16BitFromMemoryNative((byte*)pbuffer, len);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int Is16BitFromCallbacksNative([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StbiIoCallbacks*, void*, int>)funcTable[26])(clbk, user);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[26])((nint)clbk, (nint)user);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16BitFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] StbiIoCallbacks* clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user)
		{
			int ret = Is16BitFromCallbacksNative(clbk, user);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit_from_callbacks")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16BitFromCallbacks([NativeName(NativeNameType.Param, "clbk")] [NativeName(NativeNameType.Type, "const stbi_io_callbacks*")] ref StbiIoCallbacks clbk, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user)
		{
			fixed (StbiIoCallbacks* pclbk = &clbk)
			{
				int ret = Is16BitFromCallbacksNative((StbiIoCallbacks*)pclbk, user);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int InfoNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int*, int*, int>)funcTable[27])(filename, x, y, comp);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int>)funcTable[27])((nint)filename, (nint)x, (nint)y, (nint)comp);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			int ret = InfoNative(filename, x, y, comp);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = InfoNative((byte*)pfilename, x, y, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = InfoNative((byte*)pfilename, x, y, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = InfoNative(pStr0, x, y, comp);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* px = &x)
			{
				int ret = InfoNative(filename, (int*)px, y, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* px = &x)
				{
					int ret = InfoNative((byte*)pfilename, (int*)px, y, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* px = &x)
				{
					int ret = InfoNative((byte*)pfilename, (int*)px, y, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* px = &x)
			{
				int ret = InfoNative(pStr0, (int*)px, y, comp);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* py = &y)
			{
				int ret = InfoNative(filename, x, (int*)py, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* py = &y)
				{
					int ret = InfoNative((byte*)pfilename, x, (int*)py, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* py = &y)
				{
					int ret = InfoNative((byte*)pfilename, x, (int*)py, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* py = &y)
			{
				int ret = InfoNative(pStr0, x, (int*)py, comp);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					int ret = InfoNative(filename, (int*)px, (int*)py, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						int ret = InfoNative((byte*)pfilename, (int*)px, (int*)py, comp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						int ret = InfoNative((byte*)pfilename, (int*)px, (int*)py, comp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					int ret = InfoNative(pStr0, (int*)px, (int*)py, comp);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* pcomp = &comp)
			{
				int ret = InfoNative(filename, x, y, (int*)pcomp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoNative((byte*)pfilename, x, y, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoNative((byte*)pfilename, x, y, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcomp = &comp)
			{
				int ret = InfoNative(pStr0, x, y, (int*)pcomp);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoNative(filename, (int*)px, y, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoNative((byte*)pfilename, (int*)px, y, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoNative((byte*)pfilename, (int*)px, y, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* px = &x)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoNative(pStr0, (int*)px, y, (int*)pcomp);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* py = &y)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoNative(filename, x, (int*)py, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoNative((byte*)pfilename, x, (int*)py, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoNative((byte*)pfilename, x, (int*)py, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* py = &y)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoNative(pStr0, x, (int*)py, (int*)pcomp);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoNative(filename, (int*)px, (int*)py, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						fixed (int* pcomp = &comp)
						{
							int ret = InfoNative((byte*)pfilename, (int*)px, (int*)py, (int*)pcomp);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						fixed (int* pcomp = &comp)
						{
							int ret = InfoNative((byte*)pfilename, (int*)px, (int*)py, (int*)pcomp);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Info([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoNative(pStr0, (int*)px, (int*)py, (int*)pcomp);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int InfoFromFileNative([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<FileHandle*, int*, int*, int*, int>)funcTable[28])(f, x, y, comp);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int>)funcTable[28])((nint)f, (nint)x, (nint)y, (nint)comp);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			int ret = InfoFromFileNative(f, x, y, comp);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (FileHandle* pf = &f)
			{
				int ret = InfoFromFileNative((FileHandle*)pf, x, y, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* px = &x)
			{
				int ret = InfoFromFileNative(f, (int*)px, y, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* px = &x)
				{
					int ret = InfoFromFileNative((FileHandle*)pf, (int*)px, y, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* py = &y)
			{
				int ret = InfoFromFileNative(f, x, (int*)py, comp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* py = &y)
				{
					int ret = InfoFromFileNative((FileHandle*)pf, x, (int*)py, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					int ret = InfoFromFileNative(f, (int*)px, (int*)py, comp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] int* comp)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						int ret = InfoFromFileNative((FileHandle*)pf, (int*)px, (int*)py, comp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* pcomp = &comp)
			{
				int ret = InfoFromFileNative(f, x, y, (int*)pcomp);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoFromFileNative((FileHandle*)pf, x, y, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoFromFileNative(f, (int*)px, y, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* px = &x)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoFromFileNative((FileHandle*)pf, (int*)px, y, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* py = &y)
			{
				fixed (int* pcomp = &comp)
				{
					int ret = InfoFromFileNative(f, x, (int*)py, (int*)pcomp);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoFromFileNative((FileHandle*)pf, x, (int*)py, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					fixed (int* pcomp = &comp)
					{
						int ret = InfoFromFileNative(f, (int*)px, (int*)py, (int*)pcomp);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_info_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int InfoFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y, [NativeName(NativeNameType.Param, "comp")] [NativeName(NativeNameType.Type, "int*")] ref int comp)
		{
			fixed (FileHandle* pf = &f)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						fixed (int* pcomp = &comp)
						{
							int ret = InfoFromFileNative((FileHandle*)pf, (int*)px, (int*)py, (int*)pcomp);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int Is16BitNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)funcTable[29])(filename);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[29])((nint)filename);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16Bit([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename)
		{
			int ret = Is16BitNative(filename);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16Bit([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = Is16BitNative((byte*)pfilename);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16Bit([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = Is16BitNative((byte*)pfilename);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16Bit([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = Is16BitNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int Is16BitFromFileNative([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<FileHandle*, int>)funcTable[30])(f);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[30])((nint)f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16BitFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] FileHandle* f)
		{
			int ret = Is16BitFromFileNative(f);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_is_16_bit_from_file")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Is16BitFromFile([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "FILE*")] ref FileHandle f)
		{
			fixed (FileHandle* pf = &f)
			{
				int ret = Is16BitFromFileNative((FileHandle*)pf);
				return ret;
			}
		}

		/// <summary>
		/// for image formats that explicitly notate that they have premultiplied alpha,<br/>
		/// we just return the colors as stored in the file. set this flag to force<br/>
		/// unpremultiplication. results are undefined if the unpremultiply overflow.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_set_unpremultiply_on_load")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetUnpremultiplyOnLoadNative([NativeName(NativeNameType.Param, "flag_true_if_should_unpremultiply")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldUnpremultiply)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[31])(flagTrueIfShouldUnpremultiply);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[31])(flagTrueIfShouldUnpremultiply);
			#endif
		}

		/// <summary>
		/// for image formats that explicitly notate that they have premultiplied alpha,<br/>
		/// we just return the colors as stored in the file. set this flag to force<br/>
		/// unpremultiplication. results are undefined if the unpremultiply overflow.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_set_unpremultiply_on_load")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetUnpremultiplyOnLoad([NativeName(NativeNameType.Param, "flag_true_if_should_unpremultiply")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldUnpremultiply)
		{
			SetUnpremultiplyOnLoadNative(flagTrueIfShouldUnpremultiply);
		}

		/// <summary>
		/// indicate whether we should process iphone images back to canonical format,<br/>
		/// or just pass them through "as-is"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_convert_iphone_png_to_rgb")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConvertIphonePngToRgbNative([NativeName(NativeNameType.Param, "flag_true_if_should_convert")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldConvert)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[32])(flagTrueIfShouldConvert);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[32])(flagTrueIfShouldConvert);
			#endif
		}

		/// <summary>
		/// indicate whether we should process iphone images back to canonical format,<br/>
		/// or just pass them through "as-is"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_convert_iphone_png_to_rgb")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConvertIphonePngToRgb([NativeName(NativeNameType.Param, "flag_true_if_should_convert")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldConvert)
		{
			ConvertIphonePngToRgbNative(flagTrueIfShouldConvert);
		}

		/// <summary>
		/// flip the image vertically, so the first pixel in the output array is the bottom left<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_set_flip_vertically_on_load")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetFlipVerticallyOnLoadNative([NativeName(NativeNameType.Param, "flag_true_if_should_flip")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldFlip)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[33])(flagTrueIfShouldFlip);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[33])(flagTrueIfShouldFlip);
			#endif
		}

		/// <summary>
		/// flip the image vertically, so the first pixel in the output array is the bottom left<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_set_flip_vertically_on_load")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetFlipVerticallyOnLoad([NativeName(NativeNameType.Param, "flag_true_if_should_flip")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldFlip)
		{
			SetFlipVerticallyOnLoadNative(flagTrueIfShouldFlip);
		}

		/// <summary>
		/// as above, but only applies to images loaded on the thread that calls the function<br/>
		/// this function is only available if your compiler supports thread-local variables;<br/>
		/// calling it will fail to link if your compiler doesn't<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_set_unpremultiply_on_load_thread")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetUnpremultiplyOnLoadThreadNative([NativeName(NativeNameType.Param, "flag_true_if_should_unpremultiply")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldUnpremultiply)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[34])(flagTrueIfShouldUnpremultiply);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[34])(flagTrueIfShouldUnpremultiply);
			#endif
		}

		/// <summary>
		/// as above, but only applies to images loaded on the thread that calls the function<br/>
		/// this function is only available if your compiler supports thread-local variables;<br/>
		/// calling it will fail to link if your compiler doesn't<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_set_unpremultiply_on_load_thread")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetUnpremultiplyOnLoadThread([NativeName(NativeNameType.Param, "flag_true_if_should_unpremultiply")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldUnpremultiply)
		{
			SetUnpremultiplyOnLoadThreadNative(flagTrueIfShouldUnpremultiply);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_convert_iphone_png_to_rgb_thread")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConvertIphonePngToRgbThreadNative([NativeName(NativeNameType.Param, "flag_true_if_should_convert")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldConvert)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[35])(flagTrueIfShouldConvert);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[35])(flagTrueIfShouldConvert);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_convert_iphone_png_to_rgb_thread")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConvertIphonePngToRgbThread([NativeName(NativeNameType.Param, "flag_true_if_should_convert")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldConvert)
		{
			ConvertIphonePngToRgbThreadNative(flagTrueIfShouldConvert);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_set_flip_vertically_on_load_thread")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetFlipVerticallyOnLoadThreadNative([NativeName(NativeNameType.Param, "flag_true_if_should_flip")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldFlip)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[36])(flagTrueIfShouldFlip);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[36])(flagTrueIfShouldFlip);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_set_flip_vertically_on_load_thread")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetFlipVerticallyOnLoadThread([NativeName(NativeNameType.Param, "flag_true_if_should_flip")] [NativeName(NativeNameType.Type, "int")] int flagTrueIfShouldFlip)
		{
			SetFlipVerticallyOnLoadThreadNative(flagTrueIfShouldFlip);
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ZlibDecodeMallocGuesssizeNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int*, byte*>)funcTable[37])(buffer, len, initialSize, outlen);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, int, nint, nint>)funcTable[37])((nint)buffer, len, initialSize, (nint)outlen);
			#endif
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssize([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			byte* ret = ZlibDecodeMallocGuesssizeNative(buffer, len, initialSize, outlen);
			return ret;
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeNative(buffer, len, initialSize, outlen));
			return ret;
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssize([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				byte* ret = ZlibDecodeMallocGuesssizeNative((byte*)pbuffer, len, initialSize, outlen);
				return ret;
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeNative((byte*)pbuffer, len, initialSize, outlen));
				return ret;
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssize([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				byte* ret = ZlibDecodeMallocGuesssizeNative((byte*)pbuffer, len, initialSize, outlen);
				return ret;
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeNative((byte*)pbuffer, len, initialSize, outlen));
				return ret;
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssize([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ZlibDecodeMallocGuesssizeNative(pStr0, len, initialSize, outlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeNative(pStr0, len, initialSize, outlen));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssize([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (int* poutlen = &outlen)
			{
				byte* ret = ZlibDecodeMallocGuesssizeNative(buffer, len, initialSize, (int*)poutlen);
				return ret;
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (int* poutlen = &outlen)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeNative(buffer, len, initialSize, (int*)poutlen));
				return ret;
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssize([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					byte* ret = ZlibDecodeMallocGuesssizeNative((byte*)pbuffer, len, initialSize, (int*)poutlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeNative((byte*)pbuffer, len, initialSize, (int*)poutlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssize([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					byte* ret = ZlibDecodeMallocGuesssizeNative((byte*)pbuffer, len, initialSize, (int*)poutlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeNative((byte*)pbuffer, len, initialSize, (int*)poutlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssize([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* poutlen = &outlen)
			{
				byte* ret = ZlibDecodeMallocGuesssizeNative(pStr0, len, initialSize, (int*)poutlen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// ZLIB client - used by PNG, available for other purposes<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* poutlen = &outlen)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeNative(pStr0, len, initialSize, (int*)poutlen));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ZlibDecodeMallocGuesssizeHeaderflagNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int*, int, byte*>)funcTable[38])(buffer, len, initialSize, outlen, parseHeader);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, int, nint, int, nint>)funcTable[38])((nint)buffer, len, initialSize, (nint)outlen, parseHeader);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssizeHeaderflag([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			byte* ret = ZlibDecodeMallocGuesssizeHeaderflagNative(buffer, len, initialSize, outlen, parseHeader);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeHeaderflagS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeHeaderflagNative(buffer, len, initialSize, outlen, parseHeader));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssizeHeaderflag([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (byte* pbuffer = &buffer)
			{
				byte* ret = ZlibDecodeMallocGuesssizeHeaderflagNative((byte*)pbuffer, len, initialSize, outlen, parseHeader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeHeaderflagS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (byte* pbuffer = &buffer)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeHeaderflagNative((byte*)pbuffer, len, initialSize, outlen, parseHeader));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssizeHeaderflag([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (byte* pbuffer = buffer)
			{
				byte* ret = ZlibDecodeMallocGuesssizeHeaderflagNative((byte*)pbuffer, len, initialSize, outlen, parseHeader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeHeaderflagS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (byte* pbuffer = buffer)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeHeaderflagNative((byte*)pbuffer, len, initialSize, outlen, parseHeader));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssizeHeaderflag([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ZlibDecodeMallocGuesssizeHeaderflagNative(pStr0, len, initialSize, outlen, parseHeader);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeHeaderflagS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeHeaderflagNative(pStr0, len, initialSize, outlen, parseHeader));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssizeHeaderflag([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (int* poutlen = &outlen)
			{
				byte* ret = ZlibDecodeMallocGuesssizeHeaderflagNative(buffer, len, initialSize, (int*)poutlen, parseHeader);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeHeaderflagS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (int* poutlen = &outlen)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeHeaderflagNative(buffer, len, initialSize, (int*)poutlen, parseHeader));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssizeHeaderflag([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					byte* ret = ZlibDecodeMallocGuesssizeHeaderflagNative((byte*)pbuffer, len, initialSize, (int*)poutlen, parseHeader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeHeaderflagS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeHeaderflagNative((byte*)pbuffer, len, initialSize, (int*)poutlen, parseHeader));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssizeHeaderflag([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (byte* pbuffer = buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					byte* ret = ZlibDecodeMallocGuesssizeHeaderflagNative((byte*)pbuffer, len, initialSize, (int*)poutlen, parseHeader);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeHeaderflagS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			fixed (byte* pbuffer = buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeHeaderflagNative((byte*)pbuffer, len, initialSize, (int*)poutlen, parseHeader));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMallocGuesssizeHeaderflag([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* poutlen = &outlen)
			{
				byte* ret = ZlibDecodeMallocGuesssizeHeaderflagNative(pStr0, len, initialSize, (int*)poutlen, parseHeader);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc_guesssize_headerflag")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocGuesssizeHeaderflagS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "initial_size")] [NativeName(NativeNameType.Type, "int")] int initialSize, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen, [NativeName(NativeNameType.Param, "parse_header")] [NativeName(NativeNameType.Type, "int")] int parseHeader)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* poutlen = &outlen)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocGuesssizeHeaderflagNative(pStr0, len, initialSize, (int*)poutlen, parseHeader));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ZlibDecodeMallocNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int*, byte*>)funcTable[39])(buffer, len, outlen);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint, nint>)funcTable[39])((nint)buffer, len, (nint)outlen);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			byte* ret = ZlibDecodeMallocNative(buffer, len, outlen);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocNative(buffer, len, outlen));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				byte* ret = ZlibDecodeMallocNative((byte*)pbuffer, len, outlen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocNative((byte*)pbuffer, len, outlen));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				byte* ret = ZlibDecodeMallocNative((byte*)pbuffer, len, outlen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocNative((byte*)pbuffer, len, outlen));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ZlibDecodeMallocNative(pStr0, len, outlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocNative(pStr0, len, outlen));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (int* poutlen = &outlen)
			{
				byte* ret = ZlibDecodeMallocNative(buffer, len, (int*)poutlen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (int* poutlen = &outlen)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocNative(buffer, len, (int*)poutlen));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					byte* ret = ZlibDecodeMallocNative((byte*)pbuffer, len, (int*)poutlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocNative((byte*)pbuffer, len, (int*)poutlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					byte* ret = ZlibDecodeMallocNative((byte*)pbuffer, len, (int*)poutlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocNative((byte*)pbuffer, len, (int*)poutlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* poutlen = &outlen)
			{
				byte* ret = ZlibDecodeMallocNative(pStr0, len, (int*)poutlen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* poutlen = &outlen)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeMallocNative(pStr0, len, (int*)poutlen));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ZlibDecodeBufferNative([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] byte* ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, byte*, int, int>)funcTable[40])(obuffer, olen, ibuffer, ilen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, int, int>)funcTable[40])((nint)obuffer, olen, (nint)ibuffer, ilen);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] byte* ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			int ret = ZlibDecodeBufferNative(obuffer, olen, ibuffer, ilen);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref byte obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] byte* ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pobuffer = &obuffer)
			{
				int ret = ZlibDecodeBufferNative((byte*)pobuffer, olen, ibuffer, ilen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref string obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] byte* ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (obuffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(obuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(obuffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ZlibDecodeBufferNative(pStr0, olen, ibuffer, ilen);
			obuffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pibuffer = &ibuffer)
			{
				int ret = ZlibDecodeBufferNative(obuffer, olen, (byte*)pibuffer, ilen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pibuffer = ibuffer)
			{
				int ret = ZlibDecodeBufferNative(obuffer, olen, (byte*)pibuffer, ilen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] string ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (ibuffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(ibuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(ibuffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ZlibDecodeBufferNative(obuffer, olen, pStr0, ilen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref byte obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pobuffer = &obuffer)
			{
				fixed (byte* pibuffer = &ibuffer)
				{
					int ret = ZlibDecodeBufferNative((byte*)pobuffer, olen, (byte*)pibuffer, ilen);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref byte obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pobuffer = &obuffer)
			{
				fixed (byte* pibuffer = ibuffer)
				{
					int ret = ZlibDecodeBufferNative((byte*)pobuffer, olen, (byte*)pibuffer, ilen);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref string obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] string ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (obuffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(obuffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(obuffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (ibuffer != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(ibuffer);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(ibuffer, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ZlibDecodeBufferNative(pStr0, olen, pStr1, ilen);
			obuffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ZlibDecodeNoheaderMallocNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int*, byte*>)funcTable[41])(buffer, len, outlen);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint, nint>)funcTable[41])((nint)buffer, len, (nint)outlen);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeNoheaderMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			byte* ret = ZlibDecodeNoheaderMallocNative(buffer, len, outlen);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeNoheaderMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			string ret = Utils.DecodeStringUTF8(ZlibDecodeNoheaderMallocNative(buffer, len, outlen));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeNoheaderMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				byte* ret = ZlibDecodeNoheaderMallocNative((byte*)pbuffer, len, outlen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeNoheaderMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeNoheaderMallocNative((byte*)pbuffer, len, outlen));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeNoheaderMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				byte* ret = ZlibDecodeNoheaderMallocNative((byte*)pbuffer, len, outlen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeNoheaderMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeNoheaderMallocNative((byte*)pbuffer, len, outlen));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeNoheaderMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ZlibDecodeNoheaderMallocNative(pStr0, len, outlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeNoheaderMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] int* outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ZlibDecodeNoheaderMallocNative(pStr0, len, outlen));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeNoheaderMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (int* poutlen = &outlen)
			{
				byte* ret = ZlibDecodeNoheaderMallocNative(buffer, len, (int*)poutlen);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeNoheaderMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (int* poutlen = &outlen)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeNoheaderMallocNative(buffer, len, (int*)poutlen));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeNoheaderMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					byte* ret = ZlibDecodeNoheaderMallocNative((byte*)pbuffer, len, (int*)poutlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeNoheaderMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					string ret = Utils.DecodeStringUTF8(ZlibDecodeNoheaderMallocNative((byte*)pbuffer, len, (int*)poutlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeNoheaderMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					byte* ret = ZlibDecodeNoheaderMallocNative((byte*)pbuffer, len, (int*)poutlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeNoheaderMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			fixed (byte* pbuffer = buffer)
			{
				fixed (int* poutlen = &outlen)
				{
					string ret = Utils.DecodeStringUTF8(ZlibDecodeNoheaderMallocNative((byte*)pbuffer, len, (int*)poutlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* ZlibDecodeNoheaderMalloc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* poutlen = &outlen)
			{
				byte* ret = ZlibDecodeNoheaderMallocNative(pStr0, len, (int*)poutlen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_malloc")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string ZlibDecodeNoheaderMallocS([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "int*")] ref int outlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* poutlen = &outlen)
			{
				string ret = Utils.DecodeStringUTF8(ZlibDecodeNoheaderMallocNative(pStr0, len, (int*)poutlen));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ZlibDecodeNoheaderBufferNative([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] byte* ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, byte*, int, int>)funcTable[42])(obuffer, olen, ibuffer, ilen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, int, int>)funcTable[42])((nint)obuffer, olen, (nint)ibuffer, ilen);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeNoheaderBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] byte* obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] byte* ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			int ret = ZlibDecodeNoheaderBufferNative(obuffer, olen, ibuffer, ilen);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "stbi_zlib_decode_noheader_buffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ZlibDecodeNoheaderBuffer([NativeName(NativeNameType.Param, "obuffer")] [NativeName(NativeNameType.Type, "char*")] ref byte obuffer, [NativeName(NativeNameType.Param, "olen")] [NativeName(NativeNameType.Type, "int")] int olen, [NativeName(NativeNameType.Param, "ibuffer")] [NativeName(NativeNameType.Type, "const char*")] byte* ibuffer, [NativeName(NativeNameType.Param, "ilen")] [NativeName(NativeNameType.Type, "int")] int ilen)
		{
			fixed (byte* pobuffer = &obuffer)
			{
				int ret = ZlibDecodeNoheaderBufferNative((byte*)pobuffer, olen, ibuffer, ilen);
				return ret;
			}
		}
	}
}
