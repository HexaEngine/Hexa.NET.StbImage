// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.StbImage
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "STBIR_RESIZE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbirResize
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "user_data")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_pixels")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* InputPixels;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_w")]
		[NativeName(NativeNameType.Type, "int")]
		public int InputW;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_h")]
		[NativeName(NativeNameType.Type, "int")]
		public int InputH;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_s0")]
		[NativeName(NativeNameType.Type, "double")]
		public double InputS0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_t0")]
		[NativeName(NativeNameType.Type, "double")]
		public double InputT0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_s1")]
		[NativeName(NativeNameType.Type, "double")]
		public double InputS1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_t1")]
		[NativeName(NativeNameType.Type, "double")]
		public double InputT1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_cb")]
		[NativeName(NativeNameType.Type, "stbir_input_callback*")]
		public unsafe delegate*<void*, void*, int, int, int, void*, void*>* InputCb;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_pixels")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* OutputPixels;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_w")]
		[NativeName(NativeNameType.Type, "int")]
		public int OutputW;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_h")]
		[NativeName(NativeNameType.Type, "int")]
		public int OutputH;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_subx")]
		[NativeName(NativeNameType.Type, "int")]
		public int OutputSubx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_suby")]
		[NativeName(NativeNameType.Type, "int")]
		public int OutputSuby;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_subw")]
		[NativeName(NativeNameType.Type, "int")]
		public int OutputSubw;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_subh")]
		[NativeName(NativeNameType.Type, "int")]
		public int OutputSubh;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_cb")]
		[NativeName(NativeNameType.Type, "stbir_output_callback*")]
		public unsafe delegate*<void*, int, int, void*, void>* OutputCb;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_stride_in_bytes")]
		[NativeName(NativeNameType.Type, "int")]
		public int InputStrideInBytes;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_stride_in_bytes")]
		[NativeName(NativeNameType.Type, "int")]
		public int OutputStrideInBytes;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "splits")]
		[NativeName(NativeNameType.Type, "int")]
		public int Splits;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "fast_alpha")]
		[NativeName(NativeNameType.Type, "int")]
		public int FastAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "needs_rebuild")]
		[NativeName(NativeNameType.Type, "int")]
		public int NeedsRebuild;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "called_alloc")]
		[NativeName(NativeNameType.Type, "int")]
		public int CalledAlloc;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_pixel_layout_public")]
		[NativeName(NativeNameType.Type, "stbir_pixel_layout")]
		public StbirPixelLayout InputPixelLayoutPublic;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_pixel_layout_public")]
		[NativeName(NativeNameType.Type, "stbir_pixel_layout")]
		public StbirPixelLayout OutputPixelLayoutPublic;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_data_type")]
		[NativeName(NativeNameType.Type, "stbir_datatype")]
		public StbirDatatype InputDataType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_data_type")]
		[NativeName(NativeNameType.Type, "stbir_datatype")]
		public StbirDatatype OutputDataType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "horizontal_filter")]
		[NativeName(NativeNameType.Type, "stbir_filter")]
		public StbirFilter HorizontalFilter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertical_filter")]
		[NativeName(NativeNameType.Type, "stbir_filter")]
		public StbirFilter VerticalFilter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "horizontal_edge")]
		[NativeName(NativeNameType.Type, "stbir_edge")]
		public StbirEdge HorizontalEdge;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertical_edge")]
		[NativeName(NativeNameType.Type, "stbir_edge")]
		public StbirEdge VerticalEdge;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "horizontal_filter_kernel")]
		[NativeName(NativeNameType.Type, "stbir__kernel_callback*")]
		public unsafe delegate*<float, float, void*, float>* HorizontalFilterKernel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "horizontal_filter_support")]
		[NativeName(NativeNameType.Type, "stbir__support_callback*")]
		public unsafe delegate*<float, void*, float>* HorizontalFilterSupport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertical_filter_kernel")]
		[NativeName(NativeNameType.Type, "stbir__kernel_callback*")]
		public unsafe delegate*<float, float, void*, float>* VerticalFilterKernel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertical_filter_support")]
		[NativeName(NativeNameType.Type, "stbir__support_callback*")]
		public unsafe delegate*<float, void*, float>* VerticalFilterSupport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "samplers")]
		[NativeName(NativeNameType.Type, "stbir__info*")]
		public unsafe StbirInfo* Samplers;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe StbirResize(void* userData = default, void* inputPixels = default, int inputW = default, int inputH = default, double inputs0 = default, double inputt0 = default, double inputs1 = default, double inputt1 = default, delegate*<void*, void*, int, int, int, void*, void*>* inputCb = default, void* outputPixels = default, int outputW = default, int outputH = default, int outputSubx = default, int outputSuby = default, int outputSubw = default, int outputSubh = default, delegate*<void*, int, int, void*, void>* outputCb = default, int inputStrideInBytes = default, int outputStrideInBytes = default, int splits = default, int fastAlpha = default, int needsRebuild = default, int calledAlloc = default, StbirPixelLayout inputPixelLayoutPublic = default, StbirPixelLayout outputPixelLayoutPublic = default, StbirDatatype inputDataType = default, StbirDatatype outputDataType = default, StbirFilter horizontalFilter = default, StbirFilter verticalFilter = default, StbirEdge horizontalEdge = default, StbirEdge verticalEdge = default, delegate*<float, float, void*, float>* horizontalFilterKernel = default, delegate*<float, void*, float>* horizontalFilterSupport = default, delegate*<float, float, void*, float>* verticalFilterKernel = default, delegate*<float, void*, float>* verticalFilterSupport = default, StbirInfo* samplers = default)
		{
			UserData = userData;
			InputPixels = inputPixels;
			InputW = inputW;
			InputH = inputH;
			InputS0 = inputs0;
			InputT0 = inputt0;
			InputS1 = inputs1;
			InputT1 = inputt1;
			InputCb = (delegate*<void*, void*, int, int, int, void*, void*>*)inputCb;
			OutputPixels = outputPixels;
			OutputW = outputW;
			OutputH = outputH;
			OutputSubx = outputSubx;
			OutputSuby = outputSuby;
			OutputSubw = outputSubw;
			OutputSubh = outputSubh;
			OutputCb = (delegate*<void*, int, int, void*, void>*)outputCb;
			InputStrideInBytes = inputStrideInBytes;
			OutputStrideInBytes = outputStrideInBytes;
			Splits = splits;
			FastAlpha = fastAlpha;
			NeedsRebuild = needsRebuild;
			CalledAlloc = calledAlloc;
			InputPixelLayoutPublic = inputPixelLayoutPublic;
			OutputPixelLayoutPublic = outputPixelLayoutPublic;
			InputDataType = inputDataType;
			OutputDataType = outputDataType;
			HorizontalFilter = horizontalFilter;
			VerticalFilter = verticalFilter;
			HorizontalEdge = horizontalEdge;
			VerticalEdge = verticalEdge;
			HorizontalFilterKernel = (delegate*<float, float, void*, float>*)horizontalFilterKernel;
			HorizontalFilterSupport = (delegate*<float, void*, float>*)horizontalFilterSupport;
			VerticalFilterKernel = (delegate*<float, float, void*, float>*)verticalFilterKernel;
			VerticalFilterSupport = (delegate*<float, void*, float>*)verticalFilterSupport;
			Samplers = samplers;
		}


	}

}
