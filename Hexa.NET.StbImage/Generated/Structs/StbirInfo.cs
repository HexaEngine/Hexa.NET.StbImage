// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.StbImage
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "stbir__info")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbirInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "horizontal")]
		[NativeName(NativeNameType.Type, "stbir__sampler")]
		public StbirSampler Horizontal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertical")]
		[NativeName(NativeNameType.Type, "stbir__sampler")]
		public StbirSampler Vertical;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_data")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* InputData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_data")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* OutputData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_stride_bytes")]
		[NativeName(NativeNameType.Type, "int")]
		public int InputStrideBytes;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_stride_bytes")]
		[NativeName(NativeNameType.Type, "int")]
		public int OutputStrideBytes;

		/// <summary>
		/// The length of an individual entry in the ring buffer. The total number of ring buffers is stbir__get_filter_pixel_width(filter)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ring_buffer_length_bytes")]
		[NativeName(NativeNameType.Type, "int")]
		public int RingBufferLengthBytes;

		/// <summary>
		/// Total number of entries in the ring buffer.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ring_buffer_num_entries")]
		[NativeName(NativeNameType.Type, "int")]
		public int RingBufferNumEntries;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_type")]
		[NativeName(NativeNameType.Type, "stbir_datatype")]
		public StbirDatatype InputType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_type")]
		[NativeName(NativeNameType.Type, "stbir_datatype")]
		public StbirDatatype OutputType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "in_pixels_cb")]
		[NativeName(NativeNameType.Type, "stbir_input_callback*")]
		public unsafe delegate*<void*, void*, int, int, int, void*, void*>* InPixelsCb;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "user_data")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "out_pixels_cb")]
		[NativeName(NativeNameType.Type, "stbir_output_callback*")]
		public unsafe delegate*<void*, int, int, void*, void>* OutPixelsCb;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "scanline_extents")]
		[NativeName(NativeNameType.Type, "stbir__extents")]
		public StbirExtents ScanlineExtents;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alloced_mem")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* AllocedMem;

		/// <summary>
		/// by default 1, but there will be N of these allocated based on the thread init you did<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "split_info")]
		[NativeName(NativeNameType.Type, "stbir__per_split_info*")]
		public unsafe StbirPerSplitInfo* SplitInfo;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "decode_pixels")]
		[NativeName(NativeNameType.Type, "stbir__decode_pixels_func*")]
		public unsafe delegate*<float*, int, void*, void>* DecodePixels;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alpha_weight")]
		[NativeName(NativeNameType.Type, "stbir__alpha_weight_func*")]
		public unsafe delegate*<float*, int, void>* AlphaWeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "horizontal_gather_channels")]
		[NativeName(NativeNameType.Type, "stbir__horizontal_gather_channels_func*")]
		public unsafe delegate*<float*, uint, float*, StbirContributors*, float*, int, void>* HorizontalGatherChannels;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alpha_unweight")]
		[NativeName(NativeNameType.Type, "stbir__alpha_unweight_func*")]
		public unsafe delegate*<float*, int, void>* AlphaUnweight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encode_pixels")]
		[NativeName(NativeNameType.Type, "stbir__encode_pixels_func*")]
		public unsafe delegate*<void*, int, float*, void>* EncodePixels;

		/// <summary>
		/// Number of entries in the ring buffer that will be allocated<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "alloc_ring_buffer_num_entries")]
		[NativeName(NativeNameType.Type, "int")]
		public int AllocRingBufferNumEntries;

		/// <summary>
		/// count of splits<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "splits")]
		[NativeName(NativeNameType.Type, "int")]
		public int Splits;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_pixel_layout_internal")]
		[NativeName(NativeNameType.Type, "stbir_internal_pixel_layout")]
		public StbirInternalPixelLayout InputPixelLayoutInternal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "output_pixel_layout_internal")]
		[NativeName(NativeNameType.Type, "stbir_internal_pixel_layout")]
		public StbirInternalPixelLayout OutputPixelLayoutInternal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "input_color_and_type")]
		[NativeName(NativeNameType.Type, "int")]
		public int InputColorAndType;

		/// <summary>
		/// offset within output_data<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "offset_x")]
		[NativeName(NativeNameType.Type, "int")]
		public int OffsetX;

		/// <summary>
		/// offset within output_data<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "offset_y")]
		[NativeName(NativeNameType.Type, "int")]
		public int OffsetY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertical_first")]
		[NativeName(NativeNameType.Type, "int")]
		public int VerticalFirst;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "channels")]
		[NativeName(NativeNameType.Type, "int")]
		public int Channels;

		/// <summary>
		/// same as channels, except on RGBA/ARGB (7), or XA/AX (3)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "effective_channels")]
		[NativeName(NativeNameType.Type, "int")]
		public int EffectiveChannels;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alloced_total")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong AllocedTotal;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe StbirInfo(StbirSampler horizontal = default, StbirSampler vertical = default, void* inputData = default, void* outputData = default, int inputStrideBytes = default, int outputStrideBytes = default, int ringBufferLengthBytes = default, int ringBufferNumEntries = default, StbirDatatype inputType = default, StbirDatatype outputType = default, delegate*<void*, void*, int, int, int, void*, void*>* inPixelsCb = default, void* userData = default, delegate*<void*, int, int, void*, void>* outPixelsCb = default, StbirExtents scanlineExtents = default, void* allocedMem = default, StbirPerSplitInfo* splitInfo = default, delegate*<float*, int, void*, void>* decodePixels = default, delegate*<float*, int, void>* alphaWeight = default, delegate*<float*, uint, float*, StbirContributors*, float*, int, void>* horizontalGatherChannels = default, delegate*<float*, int, void>* alphaUnweight = default, delegate*<void*, int, float*, void>* encodePixels = default, int allocRingBufferNumEntries = default, int splits = default, StbirInternalPixelLayout inputPixelLayoutInternal = default, StbirInternalPixelLayout outputPixelLayoutInternal = default, int inputColorAndType = default, int offsetX = default, int offsetY = default, int verticalFirst = default, int channels = default, int effectiveChannels = default, ulong allocedTotal = default)
		{
			Horizontal = horizontal;
			Vertical = vertical;
			InputData = inputData;
			OutputData = outputData;
			InputStrideBytes = inputStrideBytes;
			OutputStrideBytes = outputStrideBytes;
			RingBufferLengthBytes = ringBufferLengthBytes;
			RingBufferNumEntries = ringBufferNumEntries;
			InputType = inputType;
			OutputType = outputType;
			InPixelsCb = (delegate*<void*, void*, int, int, int, void*, void*>*)inPixelsCb;
			UserData = userData;
			OutPixelsCb = (delegate*<void*, int, int, void*, void>*)outPixelsCb;
			ScanlineExtents = scanlineExtents;
			AllocedMem = allocedMem;
			SplitInfo = splitInfo;
			DecodePixels = (delegate*<float*, int, void*, void>*)decodePixels;
			AlphaWeight = (delegate*<float*, int, void>*)alphaWeight;
			HorizontalGatherChannels = (delegate*<float*, uint, float*, StbirContributors*, float*, int, void>*)horizontalGatherChannels;
			AlphaUnweight = (delegate*<float*, int, void>*)alphaUnweight;
			EncodePixels = (delegate*<void*, int, float*, void>*)encodePixels;
			AllocRingBufferNumEntries = allocRingBufferNumEntries;
			Splits = splits;
			InputPixelLayoutInternal = inputPixelLayoutInternal;
			OutputPixelLayoutInternal = outputPixelLayoutInternal;
			InputColorAndType = inputColorAndType;
			OffsetX = offsetX;
			OffsetY = offsetY;
			VerticalFirst = verticalFirst;
			Channels = channels;
			EffectiveChannels = effectiveChannels;
			AllocedTotal = allocedTotal;
		}


	}

}
