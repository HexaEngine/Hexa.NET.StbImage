// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.StbImage
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "stbir__extents")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbirExtents
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "conservative")]
		[NativeName(NativeNameType.Type, "stbir__contributors")]
		public StbirContributors Conservative;

		/// <summary>
		/// this can be less than filter_pixel_margin, if the filter and scaling falls off<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "edge_sizes")]
		[NativeName(NativeNameType.Type, "int[2]")]
		public int EdgeSizes_0;
		public int EdgeSizes_1;

		/// <summary>
		/// can be two spans, if doing input subrect with clamp mode WRAP<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "spans")]
		[NativeName(NativeNameType.Type, "stbir__span[2]")]
		public StbirSpan Spans_0;
		public StbirSpan Spans_1;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe StbirExtents(StbirContributors conservative = default, int* edgeSizes = default, StbirSpan* spans = default)
		{
			Conservative = conservative;
			if (edgeSizes != default(int*))
			{
				EdgeSizes_0 = edgeSizes[0];
				EdgeSizes_1 = edgeSizes[1];
			}
			if (spans != default(StbirSpan*))
			{
				Spans_0 = spans[0];
				Spans_1 = spans[1];
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe StbirExtents(StbirContributors conservative = default, Span<int> edgeSizes = default, Span<StbirSpan> spans = default)
		{
			Conservative = conservative;
			if (edgeSizes != default(Span<int>))
			{
				EdgeSizes_0 = edgeSizes[0];
				EdgeSizes_1 = edgeSizes[1];
			}
			if (spans != default(Span<StbirSpan>))
			{
				Spans_0 = spans[0];
				Spans_1 = spans[1];
			}
		}


		/// <summary>
		/// can be two spans, if doing input subrect with clamp mode WRAP<br/>
		/// </summary>
		public unsafe Span<StbirSpan> Spans
		
		{
			get
			{
				fixed (StbirSpan* p = &this.Spans_0)
				{
					return new Span<StbirSpan>(p, 2);
				}
			}
		}
	}

}
