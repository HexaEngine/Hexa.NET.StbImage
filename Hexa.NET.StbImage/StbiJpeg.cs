// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.StbImage
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "stbi__jpeg")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbiJpeg
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.StructOrClass, "stbi__jpeg::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct StbiJpegUnion
		{
			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "id")]
			[NativeName(NativeNameType.Type, "int")]
			public int Id;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "h")]
			[NativeName(NativeNameType.Type, "int")]
			public int H;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "v")]
			[NativeName(NativeNameType.Type, "int")]
			public int V;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "tq")]
			[NativeName(NativeNameType.Type, "int")]
			public int Tq;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "hd")]
			[NativeName(NativeNameType.Type, "int")]
			public int Hd;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "ha")]
			[NativeName(NativeNameType.Type, "int")]
			public int Ha;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "dc_pred")]
			[NativeName(NativeNameType.Type, "int")]
			public int DcPred;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "x")]
			[NativeName(NativeNameType.Type, "int")]
			public int X;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "y")]
			[NativeName(NativeNameType.Type, "int")]
			public int Y;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "w2")]
			[NativeName(NativeNameType.Type, "int")]
			public int W2;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "h2")]
			[NativeName(NativeNameType.Type, "int")]
			public int H2;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "data")]
			[NativeName(NativeNameType.Type, "stbi_uc*")]
			public unsafe byte* Data;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "raw_data")]
			[NativeName(NativeNameType.Type, "void*")]
			public unsafe void* RawData;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "raw_coeff")]
			[NativeName(NativeNameType.Type, "void*")]
			public unsafe void* RawCoeff;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "linebuf")]
			[NativeName(NativeNameType.Type, "stbi_uc*")]
			public unsafe byte* Linebuf;

			/// <summary>
			/// progressive only<br/>
			/// </summary>
			[NativeName(NativeNameType.Field, "coeff")]
			[NativeName(NativeNameType.Type, "short*")]
			public unsafe short* Coeff;

			/// <summary>
			/// number of 8x8 coefficient blocks<br/>
			/// </summary>
			[NativeName(NativeNameType.Field, "coeff_w")]
			[NativeName(NativeNameType.Type, "int")]
			public int CoeffW;

			/// <summary>
			/// number of 8x8 coefficient blocks<br/>
			/// </summary>
			[NativeName(NativeNameType.Field, "coeff_h")]
			[NativeName(NativeNameType.Type, "int")]
			public int CoeffH;


			/// <summary>
			/// To be documented.
			/// </summary>
			public unsafe StbiJpegUnion(int id = default, int h = default, int v = default, int tq = default, int hd = default, int ha = default, int dcPred = default, int x = default, int y = default, int w2 = default, int h2 = default, byte* data = default, void* rawData = default, void* rawCoeff = default, byte* linebuf = default, short* coeff = default, int coeffW = default, int coeffH = default)
			{
				Id = id;
				H = h;
				V = v;
				Tq = tq;
				Hd = hd;
				Ha = ha;
				DcPred = dcPred;
				X = x;
				Y = y;
				W2 = w2;
				H2 = h2;
				Data = data;
				RawData = rawData;
				RawCoeff = rawCoeff;
				Linebuf = linebuf;
				Coeff = coeff;
				CoeffW = coeffW;
				CoeffH = coeffH;
			}


		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "s")]
		[NativeName(NativeNameType.Type, "stbi__context*")]
		public unsafe StbiContext* S;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "huff_dc")]
		[NativeName(NativeNameType.Type, "stbi__huffman[4]")]
		public StbiHuffman HuffDc_0;
		public StbiHuffman HuffDc_1;
		public StbiHuffman HuffDc_2;
		public StbiHuffman HuffDc_3;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "huff_ac")]
		[NativeName(NativeNameType.Type, "stbi__huffman[4]")]
		public StbiHuffman HuffAc_0;
		public StbiHuffman HuffAc_1;
		public StbiHuffman HuffAc_2;
		public StbiHuffman HuffAc_3;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "dequant")]
		[NativeName(NativeNameType.Type, "stbi__uint16[64][4]")]
		public unsafe ushort* Dequant_0;
		public unsafe ushort* Dequant_1;
		public unsafe ushort* Dequant_2;
		public unsafe ushort* Dequant_3;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "fast_ac")]
		[NativeName(NativeNameType.Type, "stbi__int16[512][4]")]
		public unsafe short* FastAc_0;
		public unsafe short* FastAc_1;
		public unsafe short* FastAc_2;
		public unsafe short* FastAc_3;

		/// <summary>
		/// sizes for components, interleaved MCUs<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "img_h_max")]
		[NativeName(NativeNameType.Type, "int")]
		public int ImgHMax;

		/// <summary>
		/// sizes for components, interleaved MCUs<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "img_v_max")]
		[NativeName(NativeNameType.Type, "int")]
		public int ImgVMax;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "img_mcu_x")]
		[NativeName(NativeNameType.Type, "int")]
		public int ImgMcuX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "img_mcu_y")]
		[NativeName(NativeNameType.Type, "int")]
		public int ImgMcuY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "img_mcu_w")]
		[NativeName(NativeNameType.Type, "int")]
		public int ImgMcuW;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "img_mcu_h")]
		[NativeName(NativeNameType.Type, "int")]
		public int ImgMcuH;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "img_comp")]
		[NativeName(NativeNameType.Type, "[4]")]
		public StbiJpegUnion ImgComp_0;
		public StbiJpegUnion ImgComp_1;
		public StbiJpegUnion ImgComp_2;
		public StbiJpegUnion ImgComp_3;

		/// <summary>
		/// jpeg entropy-coded buffer<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "code_buffer")]
		[NativeName(NativeNameType.Type, "stbi__uint32")]
		public uint CodeBuffer;

		/// <summary>
		/// number of valid bits<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "code_bits")]
		[NativeName(NativeNameType.Type, "int")]
		public int CodeBits;

		/// <summary>
		/// marker seen while filling entropy buffer<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "marker")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte Marker;

		/// <summary>
		/// flag if we saw a marker so must stop<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "nomore")]
		[NativeName(NativeNameType.Type, "int")]
		public int Nomore;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "progressive")]
		[NativeName(NativeNameType.Type, "int")]
		public int Progressive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "spec_start")]
		[NativeName(NativeNameType.Type, "int")]
		public int SpecStart;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "spec_end")]
		[NativeName(NativeNameType.Type, "int")]
		public int SpecEnd;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "succ_high")]
		[NativeName(NativeNameType.Type, "int")]
		public int SuccHigh;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "succ_low")]
		[NativeName(NativeNameType.Type, "int")]
		public int SuccLow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "eob_run")]
		[NativeName(NativeNameType.Type, "int")]
		public int EobRun;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "jfif")]
		[NativeName(NativeNameType.Type, "int")]
		public int Jfif;

		/// <summary>
		/// Adobe APP14 tag<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "app14_color_transform")]
		[NativeName(NativeNameType.Type, "int")]
		public int App14ColorTransform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "rgb")]
		[NativeName(NativeNameType.Type, "int")]
		public int Rgb;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "scan_n")]
		[NativeName(NativeNameType.Type, "int")]
		public int ScanN;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "order")]
		[NativeName(NativeNameType.Type, "int[4]")]
		public int Order_0;
		public int Order_1;
		public int Order_2;
		public int Order_3;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "restart_interval")]
		[NativeName(NativeNameType.Type, "int")]
		public int RestartInterval;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "todo")]
		[NativeName(NativeNameType.Type, "int")]
		public int Todo;

		/// <summary>
		/// kernels<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "idct_block_kernel")]
		[NativeName(NativeNameType.Type, "void (*)(stbi_uc* out, int out_stride, short[64] data)*")]
		public unsafe void* IdctBlockKernel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "YCbCr_to_RGB_kernel")]
		[NativeName(NativeNameType.Type, "void (*)(stbi_uc* out, const stbi_uc* y, const stbi_uc* pcb, const stbi_uc* pcr, int count, int step)*")]
		public unsafe void* YCbCrToRGBKernel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "resample_row_hv_2_kernel")]
		[NativeName(NativeNameType.Type, "stbi_uc* (*)(stbi_uc* out, stbi_uc* in_near, stbi_uc* in_far, int w, int hs)*")]
		public unsafe void* ResampleRowHv2Kernel;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe StbiJpeg(StbiContext* s = default, StbiHuffman* huffDc = default, StbiHuffman* huffAc = default, ushort** dequant = default, short** fastAc = default, int imgHMax = default, int imgVMax = default, int imgMcuX = default, int imgMcuY = default, int imgMcuW = default, int imgMcuH = default, StbiJpegUnion* imgComp = default, uint codeBuffer = default, int codeBits = default, byte marker = default, int nomore = default, int progressive = default, int specStart = default, int specEnd = default, int succHigh = default, int succLow = default, int eobRun = default, int jfif = default, int app14ColorTransform = default, int rgb = default, int scanN = default, int* order = default, int restartInterval = default, int todo = default, delegate*<byte*, int, short*, void> idctBlockKernel = default, delegate*<byte*, byte*, byte*, byte*, int, int, void> ycbcrToRgbKernel = default, delegate*<byte*, byte*, byte*, int, int, byte*> resampleRowHv2Kernel = default)
		{
			S = s;
			if (huffDc != default(StbiHuffman*))
			{
				HuffDc_0 = huffDc[0];
				HuffDc_1 = huffDc[1];
				HuffDc_2 = huffDc[2];
				HuffDc_3 = huffDc[3];
			}
			if (huffAc != default(StbiHuffman*))
			{
				HuffAc_0 = huffAc[0];
				HuffAc_1 = huffAc[1];
				HuffAc_2 = huffAc[2];
				HuffAc_3 = huffAc[3];
			}
			if (dequant != default(ushort**))
			{
				Dequant_0 = dequant[0];
				Dequant_1 = dequant[1];
				Dequant_2 = dequant[2];
				Dequant_3 = dequant[3];
			}
			if (fastAc != default(short**))
			{
				FastAc_0 = fastAc[0];
				FastAc_1 = fastAc[1];
				FastAc_2 = fastAc[2];
				FastAc_3 = fastAc[3];
			}
			ImgHMax = imgHMax;
			ImgVMax = imgVMax;
			ImgMcuX = imgMcuX;
			ImgMcuY = imgMcuY;
			ImgMcuW = imgMcuW;
			ImgMcuH = imgMcuH;
			if (imgComp != default(StbiJpegUnion*))
			{
				ImgComp_0 = imgComp[0];
				ImgComp_1 = imgComp[1];
				ImgComp_2 = imgComp[2];
				ImgComp_3 = imgComp[3];
			}
			CodeBuffer = codeBuffer;
			CodeBits = codeBits;
			Marker = marker;
			Nomore = nomore;
			Progressive = progressive;
			SpecStart = specStart;
			SpecEnd = specEnd;
			SuccHigh = succHigh;
			SuccLow = succLow;
			EobRun = eobRun;
			Jfif = jfif;
			App14ColorTransform = app14ColorTransform;
			Rgb = rgb;
			ScanN = scanN;
			if (order != default(int*))
			{
				Order_0 = order[0];
				Order_1 = order[1];
				Order_2 = order[2];
				Order_3 = order[3];
			}
			RestartInterval = restartInterval;
			Todo = todo;
			IdctBlockKernel = (void*)idctBlockKernel;
			YCbCrToRGBKernel = (void*)ycbcrToRgbKernel;
			ResampleRowHv2Kernel = (void*)resampleRowHv2Kernel;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe StbiJpeg(StbiContext* s = default, Span<StbiHuffman> huffDc = default, Span<StbiHuffman> huffAc = default, Span<Pointer<ushort>> dequant = default, Span<Pointer<short>> fastAc = default, int imgHMax = default, int imgVMax = default, int imgMcuX = default, int imgMcuY = default, int imgMcuW = default, int imgMcuH = default, Span<StbiJpegUnion> imgComp = default, uint codeBuffer = default, int codeBits = default, byte marker = default, int nomore = default, int progressive = default, int specStart = default, int specEnd = default, int succHigh = default, int succLow = default, int eobRun = default, int jfif = default, int app14ColorTransform = default, int rgb = default, int scanN = default, Span<int> order = default, int restartInterval = default, int todo = default, delegate*<byte*, int, short*, void> idctBlockKernel = default, delegate*<byte*, byte*, byte*, byte*, int, int, void> ycbcrToRgbKernel = default, delegate*<byte*, byte*, byte*, int, int, byte*> resampleRowHv2Kernel = default)
		{
			S = s;
			if (huffDc != default(Span<StbiHuffman>))
			{
				HuffDc_0 = huffDc[0];
				HuffDc_1 = huffDc[1];
				HuffDc_2 = huffDc[2];
				HuffDc_3 = huffDc[3];
			}
			if (huffAc != default(Span<StbiHuffman>))
			{
				HuffAc_0 = huffAc[0];
				HuffAc_1 = huffAc[1];
				HuffAc_2 = huffAc[2];
				HuffAc_3 = huffAc[3];
			}
			if (dequant != default(Span<Pointer<ushort>>))
			{
				Dequant_0 = dequant[0];
				Dequant_1 = dequant[1];
				Dequant_2 = dequant[2];
				Dequant_3 = dequant[3];
			}
			if (fastAc != default(Span<Pointer<short>>))
			{
				FastAc_0 = fastAc[0];
				FastAc_1 = fastAc[1];
				FastAc_2 = fastAc[2];
				FastAc_3 = fastAc[3];
			}
			ImgHMax = imgHMax;
			ImgVMax = imgVMax;
			ImgMcuX = imgMcuX;
			ImgMcuY = imgMcuY;
			ImgMcuW = imgMcuW;
			ImgMcuH = imgMcuH;
			if (imgComp != default(Span<StbiJpegUnion>))
			{
				ImgComp_0 = imgComp[0];
				ImgComp_1 = imgComp[1];
				ImgComp_2 = imgComp[2];
				ImgComp_3 = imgComp[3];
			}
			CodeBuffer = codeBuffer;
			CodeBits = codeBits;
			Marker = marker;
			Nomore = nomore;
			Progressive = progressive;
			SpecStart = specStart;
			SpecEnd = specEnd;
			SuccHigh = succHigh;
			SuccLow = succLow;
			EobRun = eobRun;
			Jfif = jfif;
			App14ColorTransform = app14ColorTransform;
			Rgb = rgb;
			ScanN = scanN;
			if (order != default(Span<int>))
			{
				Order_0 = order[0];
				Order_1 = order[1];
				Order_2 = order[2];
				Order_3 = order[3];
			}
			RestartInterval = restartInterval;
			Todo = todo;
			IdctBlockKernel = (void*)idctBlockKernel;
			YCbCrToRGBKernel = (void*)ycbcrToRgbKernel;
			ResampleRowHv2Kernel = (void*)resampleRowHv2Kernel;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<StbiHuffman> HuffDc
		
		{
			get
			{
				fixed (StbiHuffman* p = &this.HuffDc_0)
				{
					return new Span<StbiHuffman>(p, 4);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<StbiHuffman> HuffAc
		
		{
			get
			{
				fixed (StbiHuffman* p = &this.HuffAc_0)
				{
					return new Span<StbiHuffman>(p, 4);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<ushort>> Dequant
		
		{
			get
			{
				fixed (ushort** p = &this.Dequant_0)
				{
					return new Span<Pointer<ushort>>(p, 4);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<short>> FastAc
		
		{
			get
			{
				fixed (short** p = &this.FastAc_0)
				{
					return new Span<Pointer<short>>(p, 4);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<StbiJpegUnion> ImgComp
		
		{
			get
			{
				fixed (StbiJpegUnion* p = &this.ImgComp_0)
				{
					return new Span<StbiJpegUnion>(p, 4);
				}
			}
		}
	}

}
